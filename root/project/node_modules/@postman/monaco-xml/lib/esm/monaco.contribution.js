/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
import { setupMode } from './xmlMode';
var LanguageServiceDefaultsImpl = /** @class */ (function () {
    function LanguageServiceDefaultsImpl(languageId, diagnosticsOptions, instanceSettings) {
        this._onDidChange = new monaco.Emitter();
        this._languageId = languageId;
        this.setDiagnosticsOptions(diagnosticsOptions);
        this._instanceSettings = instanceSettings;
    }
    Object.defineProperty(LanguageServiceDefaultsImpl.prototype, "onDidChange", {
        get: function () {
            return this._onDidChange.event;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LanguageServiceDefaultsImpl.prototype, "languageId", {
        get: function () {
            return this._languageId;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LanguageServiceDefaultsImpl.prototype, "diagnosticsOptions", {
        get: function () {
            return this._diagnosticsOptions;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LanguageServiceDefaultsImpl.prototype, "instanceSettings", {
        get: function () {
            return this._instanceSettings;
        },
        enumerable: false,
        configurable: true
    });
    LanguageServiceDefaultsImpl.prototype.setDiagnosticsOptions = function (options) {
        this._diagnosticsOptions = options || Object.create(null);
        this._onDidChange.fire(this);
    };
    LanguageServiceDefaultsImpl.prototype.setInstanceSettings = function (uri, setting) {
        var _this = this;
        this._instanceSettings.settings[uri] = setting;
        this._onDidChange.fire(this);
        return {
            dispose: function () {
                delete _this._instanceSettings.settings[uri];
                _this._onDidChange.fire(_this);
            },
        };
    };
    return LanguageServiceDefaultsImpl;
}());
export { LanguageServiceDefaultsImpl };
var diagnosticDefault = {
    validate: true,
    schemas: [],
    enableSchemaRequest: false,
    completion: true,
};
var instanceSettingsXMLDefault = {
    settings: {},
};
var xmlDefaults = new LanguageServiceDefaultsImpl('xml', diagnosticDefault, instanceSettingsXMLDefault);
// Export API
function createAPI() {
    return {
        xmlDefaults: xmlDefaults,
    };
}
monaco.languages.xml = createAPI();
// --- Registration to monaco editor ---
monaco.languages.register({
    id: 'xml',
    extensions: ['.xml', '.wsdl'],
    aliases: ['XML', 'xml', 'WSDL', 'wsdl'],
    mimetypes: ['application/xml', 'application/wsdl'],
});
monaco.languages.onLanguage('xml', function () {
    setupMode(xmlDefaults);
});
