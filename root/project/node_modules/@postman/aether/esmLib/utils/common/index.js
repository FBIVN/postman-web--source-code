import React from 'react';
import ReactDOM from 'react-dom';
import { SPAN_TO_TEXT_MAP, ALL_DEVICES } from '../constants/index';
import Tooltip from '../../components/Tooltip/Tooltip';
export function spanToClass(device, width) {
  // for all devices
  if (device === ALL_DEVICES) return "".concat(SPAN_TO_TEXT_MAP[width], "-wide-column"); // for specific devices

  return "".concat(device, "-").concat(SPAN_TO_TEXT_MAP[width], "-wide-column");
}
export function hiddenForToClass(hiddenFor) {
  return hiddenFor.map(function (device) {
    return "hidden-for-".concat(device);
  }).join(' ');
}
/**
 * Function to check if the Text component variant can be wrapped under a tooltip
 * @param {object} props - the typography component props object
 * @returns a boolean value
 */

export function isTextTruncatable(_ref) {
  var type = _ref.type,
      isTruncated = _ref.isTruncated,
      maxLines = _ref.maxLines;
  var VALID_TRUNCATABLE_TEXT_COMPONENTS = ['body-medium', 'body-large', 'body-small', 'para', 'lead', 'small', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', ''];

  if (VALID_TRUNCATABLE_TEXT_COMPONENTS.includes(type)) {
    // tooltip should only be visible for single line truncation
    if (isTruncated && !maxLines) {
      return true;
    }
  }

  return false;
}
/**
 * Function to wrap a typography component under a tooltip to be shown when its truncated
 * @param {any} children - the typography component where the tooltip is to be shown
 * @param {*} tooltipContent - the content to be displayed inside the tooltip
 * @returns tooltip wrapped typography component jsx
 */

export function wrapWithTooltip(target, tooltipContent) {
  return /*#__PURE__*/React.createElement(Tooltip, {
    placement: "top-end",
    content: tooltipContent,
    openDelay: 1000
  }, target);
}
var containerStyle = {
  display: 'inline-block',
  position: 'absolute',
  visibility: 'hidden',
  zIndex: -1,
  height: 0,
  overflow: 'hidden'
};
export var getComponentWidth = function getComponentWidth(element) {
  // Creates the hidden div appended to the document body
  var container = document.getElementById('aether-breadcrumb-portal');
  Object.assign(container.style, containerStyle); // Renders the React element into the hidden div

  var renderedElement = /*#__PURE__*/ReactDOM.createPortal(element, container); // container.parentNode.removeChild(container);

  return {
    renderedElement: renderedElement
  };
};