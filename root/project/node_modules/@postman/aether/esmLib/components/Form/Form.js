var _excluded = ["heading", "description", "width", "primaryAction", "secondaryAction", "children"];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import styled from 'styled-components';
import PropTypes from 'prop-types';
import Flex from '../Flex/Flex';
import Button from '../Button/Button';
import Heading from '../Heading/Heading';
import Text from '../Text/Text';
var StyledForm = styled.form.withConfig({
  displayName: "Form__StyledForm",
  componentId: "sc-tt766p-0"
})(["width:", ";"], function (props) {
  return props.width;
});
export default function Form(props) {
  var heading = props.heading,
      description = props.description,
      width = props.width,
      primaryAction = props.primaryAction,
      secondaryAction = props.secondaryAction,
      children = props.children,
      restOfTheProps = _objectWithoutProperties(props, _excluded);

  var renderPrimaryAction = function renderPrimaryAction(primaryActionComp) {
    if (primaryActionComp && primaryActionComp.type === Button) {
      var ButtonType = primaryActionComp.props && primaryActionComp.props.type;
      if (ButtonType === 'primary') return primaryActionComp;
    }

    return null;
  };

  var renderSecondaryAction = function renderSecondaryAction(secondaryActionComp) {
    if (secondaryActionComp && secondaryActionComp.type === Button) {
      var ButtonType = secondaryActionComp.props && secondaryActionComp.props.type;
      if (ButtonType === 'secondary') return secondaryActionComp;
    }

    return null;
  };

  return (
    /*#__PURE__*/
    // eslint-disable-next-line react/jsx-props-no-spreading
    React.createElement(StyledForm, _extends({
      width: width
    }, restOfTheProps), /*#__PURE__*/React.createElement(Flex, {
      gap: "spacing-xxl",
      direction: "column"
    }, /*#__PURE__*/React.createElement(Flex, {
      gap: "spacing-xl",
      direction: "column"
    }, /*#__PURE__*/React.createElement(Flex, {
      gap: "spacing-s",
      direction: "column"
    }, /*#__PURE__*/React.createElement(Heading, {
      type: "h1",
      text: heading
    }), /*#__PURE__*/React.createElement(Text, {
      type: "body-large",
      color: "content-color-secondary"
    }, description)), children), /*#__PURE__*/React.createElement(Flex, {
      gap: "spacing-s"
    }, renderPrimaryAction(primaryAction), renderSecondaryAction(secondaryAction))))
  );
}
Form.defaultProps = {
  description: '',
  width: '100%',
  primaryAction: null,
  secondaryAction: null
};
Form.propTypes = {
  heading: PropTypes.string.isRequired,
  description: PropTypes.string,
  width: PropTypes.string,
  primaryAction: function primaryAction(props) {
    var primaryAction = props.primaryAction;

    if (primaryAction) {
      if (primaryAction.type !== Button) return new Error('Form: primaryAction prop only accepts Aether button component.');
      var ButtonType = primaryAction.props && primaryAction.props.type;
      if (ButtonType !== 'primary') return new Error('Form: primaryAction prop only accepts button type primary.');
    }

    return null;
  },
  secondaryAction: function secondaryAction(props) {
    var secondaryAction = props.secondaryAction;

    if (secondaryAction) {
      if (secondaryAction.type !== Button) return new Error('Form: secondaryAction prop only accepts Aether button component.');
      var ButtonType = secondaryAction.props && secondaryAction.props.type;
      if (ButtonType !== 'secondary') return new Error('Form: secondaryAction prop only accepts button type secondary.');
    }

    return null;
  },
  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]).isRequired
};