var _excluded = ["data"],
    _excluded2 = ["isSelected", "isDisabled", "isFocused", "children"];

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/* eslint-disable react/prop-types */

/* eslint-disable react/jsx-props-no-spreading */
import React from 'react';
import styled from 'styled-components';
import { components } from 'react-select';
import Icon from '../Icon/Icon'; // Component to define the down-arrow icon inside react-select's trigger

function DropdownIndicatorIcon(props) {
  return /*#__PURE__*/React.createElement(components.DropdownIndicator, props, /*#__PURE__*/React.createElement(Icon, {
    name: "icon-direction-down"
  }));
} // Component to define the cross-icon inside react-select's trigger


function ClearIndicatorIcon(props) {
  var isFocused = props.isFocused;
  return /*#__PURE__*/React.createElement(React.Fragment, null, isFocused ? /*#__PURE__*/React.createElement(components.ClearIndicator, props, /*#__PURE__*/React.createElement(Icon, {
    name: "icon-action-clear-stroke"
  })) : null);
} // Component to define the empty state message.
// This component is rendered when no options matches the filter text


var StyledEmptyState = styled.div.withConfig({
  displayName: "CustomDropdownComponents__StyledEmptyState",
  componentId: "sc-1engro6-0"
})(["font-size:", ";line-height:", ";text-align:left;padding:", ";color:", ";"], function (props) {
  return props.theme['text-size-m'];
}, function (props) {
  return props.theme['line-height-m'];
}, function (props) {
  return "".concat(props.theme['spacing-xs'], " ").concat(props.theme['spacing-m'], ";");
}, function (props) {
  return props.theme['content-color-secondary'];
});

function EmptyState(props) {
  var emptyStateMessage = props.selectProps.emptyStateMessage;
  return /*#__PURE__*/React.createElement(components.NoOptionsMessage, props, /*#__PURE__*/React.createElement(StyledEmptyState, null, emptyStateMessage));
} // Component to define the selected option inside dropdown trigger
// This component makes sure that irrespective of custom component provided as option,
// only the option label is shown inside the dropdown trigger for selected option


function SingleValue(_ref) {
  var data = _ref.data,
      props = _objectWithoutProperties(_ref, _excluded);

  return /*#__PURE__*/React.createElement(components.SingleValue, props, data.label);
} // Component to define the single dropdown option
// This component abstracts the visual appearance and interaction styles for each option


var StyledDropdownOption = styled.div.withConfig({
  displayName: "CustomDropdownComponents__StyledDropdownOption",
  componentId: "sc-1engro6-1"
})(["display:flex;align-items:center;cursor:pointer;font-size:", ";line-height:", ";padding:", ";border-radius:", ";color:", ";& > .aether-dropdown__selected-option{margin-right:", ";svg path{fill:", ";}}", " ", ""], function (props) {
  return props.theme['text-size-m'];
}, function (props) {
  return props.theme['line-height-m'];
}, function (props) {
  return "".concat(props.theme['spacing-xs'], " ").concat(props.theme['spacing-s'], ";");
}, function (props) {
  return props.theme['border-radius-default'];
}, function (props) {
  return props.theme['content-color-primary'];
}, function (props) {
  return props.theme['spacing-s'];
}, function (props) {
  return props.theme['content-color-secondary'];
}, function (props) {
  return props.isFocused && !props.isDisabled && "background-color: ".concat(props.theme['highlight-background-color-primary'], ";");
}, function (props) {
  return props.isDisabled && "\n      cursor: not-allowed;\n      color: ".concat(props.theme['content-color-tertiary'], ";\n    ");
});
var EmptySelectedIconPlaceholder = styled.div.withConfig({
  displayName: "CustomDropdownComponents__EmptySelectedIconPlaceholder",
  componentId: "sc-1engro6-2"
})(["display:flex;flex-shrink:0;margin-right:", ";width:", ";height:", ";"], function (props) {
  return props.theme['spacing-s'];
}, function (props) {
  return props.theme['size-xs'];
}, function (props) {
  return props.theme['size-xs'];
});

function Option(props) {
  var isSelected = props.isSelected,
      isDisabled = props.isDisabled,
      isFocused = props.isFocused,
      children = props.children,
      restOfProps = _objectWithoutProperties(props, _excluded2);

  return /*#__PURE__*/React.createElement(components.Option, restOfProps, /*#__PURE__*/React.createElement(StyledDropdownOption, {
    isDisabled: isDisabled,
    isFocused: isFocused
  }, isSelected ? /*#__PURE__*/React.createElement(Icon, {
    name: "icon-state-check-stroke",
    className: "aether-dropdown__selected-option"
  }) : /*#__PURE__*/React.createElement(EmptySelectedIconPlaceholder, null), children));
}

export { DropdownIndicatorIcon, ClearIndicatorIcon, Option, SingleValue, EmptyState };