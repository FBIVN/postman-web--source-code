function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

/* eslint-disable react/jsx-props-no-spreading */
import React from 'react';
import styled from 'styled-components';
import Select from 'react-select';
import CreatableReactSelect from 'react-select/creatable';
import propTypes from 'prop-types';
import { DropdownIndicatorIcon, ClearIndicatorIcon, Option, EmptyState, SingleValue } from './CustomDropdownComponents';
import { postmanSpecificStyles, customBaseStyles } from './CustomDropdownStyles';
import Label from '../Label/Label';
import Text from '../Text/Text';
import Icon from '../Icon/Icon';
var StyledDropdownContainer = styled.div.withConfig({
  displayName: "Dropdown__StyledDropdownContainer",
  componentId: "sc-14hkfy-0"
})(["display:flex;flex-direction:column;"]);
var StyledDropdownInfo = styled.div.withConfig({
  displayName: "Dropdown__StyledDropdownInfo",
  componentId: "sc-14hkfy-1"
})(["margin-bottom:", ";"], function (props) {
  return props.theme['spacing-xs'];
});
var StyledValidationMessage = styled.p.withConfig({
  displayName: "Dropdown__StyledValidationMessage",
  componentId: "sc-14hkfy-2"
})(["display:flex;align-items:center;font-size:", ";line-height:", ";color:", ";margin:", " ", " ", " ", ";"], function (props) {
  return props.theme['text-size-s'];
}, function (props) {
  return props.theme['line-height-s'];
}, function (props) {
  return props.theme["content-color-".concat(props.status)];
}, function (props) {
  return props.theme['spacing-xs'];
}, function (props) {
  return props.theme['spacing-zero'];
}, function (props) {
  return props.theme['spacing-zero'];
}, function (props) {
  return props.theme['spacing-zero'];
});
var StyledValidationMessageIcon = styled(Icon).withConfig({
  displayName: "Dropdown__StyledValidationMessageIcon",
  componentId: "sc-14hkfy-3"
})(["margin-right:", ";"], function (props) {
  return props.theme['spacing-xs'];
});

var applyValidationStyles = function applyValidationStyles(status, theme) {
  if (status) {
    return "\n      & .aether-dropdown__control {\n        border-color: ".concat(theme["input-border-color-".concat(status)], ";\n\n        &:hover {\n          border-color: ").concat(theme["input-border-color-".concat(status)], ";\n        }\n\n        &--is-focused,\n        &--is-focused:hover {\n          border-color: ").concat(theme["input-border-color-focus"], ";;\n        }\n      }\n    ");
  }

  return "";
};

var StyledReactSelect = styled(Select).withConfig({
  displayName: "Dropdown__StyledReactSelect",
  componentId: "sc-14hkfy-4"
})(["", " ", ""], postmanSpecificStyles, function (props) {
  return applyValidationStyles(props.validationState.status, props.theme);
});
var StyledCreatableReactSelect = styled(CreatableReactSelect).withConfig({
  displayName: "Dropdown__StyledCreatableReactSelect",
  componentId: "sc-14hkfy-5"
})(["", " ", ""], postmanSpecificStyles, function (props) {
  return applyValidationStyles(props.validationState.status, props.theme);
});

function renderDropdownLabel(label, id) {
  if (typeof label === 'string') {
    return /*#__PURE__*/React.createElement(Label, {
      type: "primary",
      text: label,
      htmlFor: id
    });
  }

  if (label && /*#__PURE__*/React.isValidElement(label) && label.type === Label) {
    return /*#__PURE__*/React.cloneElement(label, {
      type: 'primary',
      htmlFor: id
    });
  }

  return null;
}

export default function Dropdown(props) {
  var isOpen = props.isOpen,
      onChange = props.onChange,
      onClose = props.onClose,
      onOpen = props.onOpen,
      options = props.options,
      value = props.value,
      placeholder = props.placeholder,
      emptyStateMessage = props.emptyStateMessage,
      label = props.label,
      helperText = props.helperText,
      id = props.id,
      isClearable = props.isClearable,
      isSearchable = props.isSearchable,
      isDisabled = props.isDisabled,
      isOptionDisabled = props.isOptionDisabled,
      allowCustomValues = props.allowCustomValues,
      customOptionComponent = props.customOptionComponent,
      maxMenuHeight = props.maxMenuHeight,
      validationState = props.validationState,
      className = props.className;
  return /*#__PURE__*/React.createElement(StyledDropdownContainer, null, label || helperText ? /*#__PURE__*/React.createElement(StyledDropdownInfo, null, renderDropdownLabel(label, id), helperText && /*#__PURE__*/React.createElement(Text, {
    type: "_input-meta-text"
  }, helperText)) : null, allowCustomValues ? /*#__PURE__*/React.createElement(StyledCreatableReactSelect, _extends({
    inputId: id,
    menuIsOpen: isOpen,
    onChange: onChange,
    onMenuClose: onClose,
    onMenuOpen: onOpen
  }, value && {
    value: value
  }, {
    options: options,
    placeholder: placeholder,
    isClearable: isClearable,
    isSearchable: isSearchable,
    isDisabled: isDisabled
  }, isOptionDisabled && {
    isOptionDisabled: isOptionDisabled
  }, {
    emptyStateMessage: emptyStateMessage,
    formatOptionLabel: customOptionComponent,
    validationState: validationState,
    classNamePrefix: "aether-dropdown",
    className: className,
    maxMenuHeight: maxMenuHeight,
    styles: customBaseStyles,
    components: {
      DropdownIndicator: DropdownIndicatorIcon,
      ClearIndicator: ClearIndicatorIcon,
      NoOptionsMessage: EmptyState,
      Option: Option,
      SingleValue: SingleValue,
      IndicatorSeparator: null
    }
  })) : /*#__PURE__*/React.createElement(StyledReactSelect, _extends({
    inputId: id,
    menuIsOpen: isOpen,
    onChange: onChange,
    onMenuClose: onClose,
    onMenuOpen: onOpen
  }, value && {
    value: value
  }, {
    options: options,
    placeholder: placeholder,
    isClearable: isClearable,
    isSearchable: isSearchable,
    isDisabled: isDisabled
  }, isOptionDisabled && {
    isOptionDisabled: isOptionDisabled
  }, {
    emptyStateMessage: emptyStateMessage,
    formatOptionLabel: customOptionComponent,
    validationState: validationState,
    classNamePrefix: "aether-dropdown",
    className: className,
    maxMenuHeight: maxMenuHeight,
    styles: customBaseStyles,
    components: {
      DropdownIndicator: DropdownIndicatorIcon,
      ClearIndicator: ClearIndicatorIcon,
      NoOptionsMessage: EmptyState,
      Option: Option,
      SingleValue: SingleValue,
      IndicatorSeparator: null
    }
  })), validationState.status && validationState.message && /*#__PURE__*/React.createElement(StyledValidationMessage, {
    status: validationState.status
  }, /*#__PURE__*/React.createElement(StyledValidationMessageIcon, {
    color: "content-color-".concat(validationState.status),
    name: "icon-state-".concat(validationState.status, "-stroke-small"),
    size: "small"
  }), validationState.message));
}
Dropdown.defaultProps = {
  isOpen: undefined,
  onClose: null,
  onOpen: null,
  value: null,
  placeholder: 'Select option',
  emptyStateMessage: 'No options found',
  label: '',
  helperText: '',
  id: '',
  maxMenuHeight: 'auto',
  className: '',
  isClearable: true,
  isSearchable: true,
  isDisabled: false,
  isOptionDisabled: function isOptionDisabled() {},
  allowCustomValues: false,
  customOptionComponent: null,
  validationState: {
    status: '',
    message: ''
  }
};
Dropdown.propTypes = {
  onChange: propTypes.func.isRequired,
  options: propTypes.arrayOf(propTypes.shape({
    label: propTypes.string,
    value: propTypes.string
  })).isRequired,
  value: propTypes.object,
  isOpen: propTypes.bool,
  onClose: propTypes.func,
  onOpen: propTypes.func,
  placeholder: propTypes.string,
  emptyStateMessage: propTypes.string,
  label: function label(props) {
    var label = props.label;

    if (label) {
      if (label.type !== Label && typeof label !== 'string') return new Error("Dropdown: label prop only accepts string or the Aether's Label component as valid value.");
    }

    return null;
  },
  helperText: propTypes.string,
  id: propTypes.string,
  maxMenuHeight: propTypes.oneOf([propTypes.number, 'auto']),
  className: propTypes.string,
  isClearable: propTypes.bool,
  isSearchable: propTypes.bool,
  isDisabled: propTypes.bool,
  isOptionDisabled: propTypes.func,
  allowCustomValues: propTypes.bool,
  customOptionComponent: propTypes.func,
  validationState: propTypes.shape({
    status: propTypes.oneOf(['', 'success', 'error', 'warning']),
    message: propTypes.string
  })
};