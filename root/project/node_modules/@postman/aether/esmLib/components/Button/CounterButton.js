function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React, { useRef } from 'react';
import styled from 'styled-components';
import propTypes from 'prop-types';
import Popover from '../Popover/Popover';
import Button from './Button';
import { LIST_OF_ICONS } from '../../design-tokens/Icons';
/**
 * Function to render the secondary button of the CounterButton component
 *
 * Popover component needs the ref of the counter button to define its position
 * So, here we are chcecking if the consumer has passed a custom secondary button then give
 * them control to define and pass ref to the Popover component or, if they haven't pass then
 * render a default counter button as passed its ref as Popover trigger.
 *
 * @param {node} secondaryButton - defines the custom Button component
 * @param {string} count - defines the count number displayed inside the secondary button
 * @param {object} counterButtonRef - the ref of the default dropdown button
 */

function renderSecondaryButton(secondaryButton, count, counterButtonRef) {
  if (secondaryButton && secondaryButton.type === Button) {
    return /*#__PURE__*/React.cloneElement(secondaryButton, {
      text: count,
      type: 'tertiary',
      className: 'aether-counter-button__secondary-btn'
    });
  }

  return /*#__PURE__*/React.createElement(Button, {
    type: "tertiary",
    text: count,
    ref: counterButtonRef,
    className: "aether-counter-button__secondary-btn"
  });
}

var StyledCounterButton = styled.div.withConfig({
  displayName: "CounterButton__StyledCounterButton",
  componentId: "sc-zpib9w-0"
})(["width:max-content;box-sizing:border-box;cursor:pointer;user-select:none;display:inline-flex;align-items:center;border-radius:", ";height:", ";& .aether-counter-button__primary-btn:disabled{border-top-right-radius:0;border-bottom-right-radius:0;}& .aether-counter-button__secondary-btn:disabled{border-top-left-radius:0;border-bottom-left-radius:0;}& .aether-counter-button__splitter{border-left-color:", ";}&:hover{& .aether-counter-button__splitter{border-left-color:transparent;}}&:active{& .aether-counter-button__splitter{border-left-color:transparent;}}"], function (props) {
  return props.theme['border-radius-default'];
}, function (props) {
  return props.theme['size-m'];
}, function (props) {
  return props.theme['counterbutton-tertiary-splitter-color'];
});
var StyledButtonSplitter = styled.div.withConfig({
  displayName: "CounterButton__StyledButtonSplitter",
  componentId: "sc-zpib9w-1"
})(["border-width:", ";border-left-style:", ";height:20px;"], function (props) {
  return "".concat(props.theme['border-width-default']);
}, function (props) {
  return "".concat(props.theme['border-style-solid']);
});

function CounterButton(props) {
  var counterButtonRef = useRef();
  var text = props.text,
      onClick = props.onClick,
      children = props.children,
      count = props.count,
      icon = props.icon,
      tooltip = props.tooltip,
      minWidth = props.minWidth,
      className = props.className,
      isLoading = props.isLoading,
      isDisabled = props.isDisabled,
      secondaryButton = props.secondaryButton;
  var clonedChildren = React.Children.map(children, function (child) {
    if ( /*#__PURE__*/React.isValidElement(child) && child.type === Popover) {
      return /*#__PURE__*/React.cloneElement(child, _objectSpread({
        placement: 'bottom-end'
      }, !secondaryButton && {
        triggerRef: counterButtonRef
      }));
    }

    return child;
  });
  return /*#__PURE__*/React.createElement(StyledCounterButton, {
    className: className
  }, /*#__PURE__*/React.createElement(Button, {
    type: "tertiary",
    text: text,
    icon: icon,
    isLoading: isLoading,
    isDisabled: isDisabled,
    minWidth: minWidth,
    onClick: onClick,
    tooltip: tooltip,
    className: "aether-counter-button__primary-btn"
  }), !isDisabled && !isLoading && /*#__PURE__*/React.createElement(StyledButtonSplitter, {
    className: "aether-counter-button__splitter"
  }), renderSecondaryButton(secondaryButton, count, counterButtonRef), clonedChildren);
}

CounterButton.displayName = 'CounterButton';
export default CounterButton;
CounterButton.defaultProps = {
  text: '',
  count: 0,
  icon: null,
  tooltip: '',
  minWidth: '',
  className: '',
  isLoading: false,
  isDisabled: false,
  secondaryButton: null
};
CounterButton.propTypes = {
  text: propTypes.string,
  count: propTypes.number,
  onClick: propTypes.func.isRequired,
  children: propTypes.node.isRequired,
  icon: propTypes.oneOf(LIST_OF_ICONS),
  tooltip: propTypes.oneOfType([propTypes.string, propTypes.object]),
  minWidth: propTypes.string,
  className: propTypes.string,
  isLoading: propTypes.bool,
  isDisabled: propTypes.bool,
  secondaryButton: propTypes.node
};