var _excluded = ["content"];

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';
import { LIST_OF_ICONS } from '../../design-tokens/Icons';
import mixins from '../../utils/common/mixins';
import Icon from '../Icon/Icon';
import ButtonTooltip from '../Tooltip/ButtonTooltip';
import Tooltip from '../Tooltip/Tooltip';
import Spinner from '../Spinner/Spinner';
import { BUTTON_SIZES, VALID_BUTTON_TYPES } from '../constants';
/* Function to get the icon size variant based on the size of the button */

function getIconSize(buttonSize) {
  if (buttonSize === 'medium') {
    return 'large';
  }

  if (buttonSize === 'small') {
    return 'small';
  }

  return null;
}
/**
 * Function to get the CSS for button size based on the size prop
 * @param {string} size - parameter for button size. Eg: small, medium, large
 * @param {string} minWidth - specifies minimum width of the button.
 * @param {boolean} fullWidth - specifies if button should expand to full width of its parent
 * @param {object} theme - theme object containing theme specific design tokens
 *  If button text is present, a minimum width to the button is provided.
 */


function getButtonSizeStyles(size, minWidth, fullWidth, theme) {
  switch (size) {
    case 'small':
      return "\n        height: ".concat(theme['size-s'], ";\n        padding: ").concat(theme['spacing-zero'], " ").concat(theme['spacing-m'], ";\n        min-width: ").concat(minWidth || '', ";\n        ").concat(fullWidth ? 'width: 100%;' : '', "\n      ");

    default:
      return "\n        height: ".concat(theme['size-m'], ";\n        padding: ").concat(theme['spacing-zero'], " ").concat(theme['spacing-m'], ";\n        min-width: ").concat(minWidth || '', ";\n        ").concat(fullWidth ? 'width: 100%;' : '', "\n      ");
  }
}
/**
 * Function to get the CSS for button's visual appeareance related styles based on the type
 * @param {string} type - defines the variant of the button. Eg: primary, secondary, tertiary
 * @param {object} theme - theme object containing theme specific design tokens
 */


function getButtonStyles(type, theme) {
  switch (type) {
    case 'primary':
      return "\n        background-color: ".concat(theme['button-primary-background-color'], ";\n        color: ").concat(theme['button-primary-content-color'], ";\n        font-weight: ").concat(theme['text-weight-medium'], ";\n        svg path {\n          fill: ").concat(theme['button-primary-content-color'], ";\n        }\n\n        & .aether-button__loader rect {\n          fill: ").concat(theme['content-color-constant'], ";\n        }\n\n        &:hover {\n          background-color: ").concat(theme['button-primary-hover-background-color'], ";\n        }\n\n        &:active {\n          background-color: ").concat(theme['button-primary-active-background-color'], ";\n        }\n\n        &:disabled {\n          color: ").concat(theme['button-primary-disabled-content-color'], ";\n          background-color: ").concat(theme['button-primary-disabled-background-color'], ";\n        }\n      ");

    case 'secondary':
      return "\n        background-color: ".concat(theme['button-secondary-background-color'], ";\n        color: ").concat(theme['button-secondary-content-color'], ";\n        svg path {\n          fill: ").concat(theme['button-secondary-content-color'], ";\n        }\n\n        & .aether-button__loader rect {\n          fill: ").concat(theme['content-color-tertiary'], ";\n        }\n\n        &:hover {\n          background-color: ").concat(theme['button-secondary-hover-background-color'], ";\n        }\n\n        &:active {\n          background-color: ").concat(theme['button-secondary-active-background-color'], ";\n        }\n\n        &:disabled {\n          background-color: ").concat(theme['button-secondary-disabled-background-color'], ";\n          color: ").concat(theme['button-secondary-disabled-content-color'], ";\n          svg path {\n            fill: ").concat(theme['button-secondary-disabled-content-color'], ";\n          } \n        }\n      ");

    case 'tertiary':
      return "\n        background-color: ".concat(theme['button-tertiary-background-color'], ";\n        color: ").concat(theme['button-tertiary-content-color'], ";\n        svg path {\n          fill: ").concat(theme['button-tertiary-content-color'], ";\n        }\n\n        & .aether-button__loader rect {\n          fill: ").concat(theme['content-color-tertiary'], ";\n        }\n\n        &:hover {\n          background-color: ").concat(theme['button-tertiary-hover-background-color'], ";\n          color: ").concat(theme['button-tertiary-hover-content-color'], ";\n          svg path {\n            fill: ").concat(theme['button-tertiary-hover-content-color'], ";\n          }\n        }\n\n        &:active {\n          background-color: ").concat(theme['button-tertiary-active-background-color'], ";\n          color: ").concat(theme['button-tertiary-active-content-color'], ";\n          svg path {\n            fill: ").concat(theme['button-tertiary-active-content-color'], ";\n          }\n        }\n\n        &:disabled {\n          background-color: ").concat(theme['button-tertiary-disabled-background-color'], ";\n          color: ").concat(theme['button-tertiary-disabled-content-color'], ";\n          svg path {\n            fill: ").concat(theme['button-tertiary-disabled-content-color'], ";\n          }\n        }\n      ");

    case 'outline':
      return "\n        background-color: ".concat(theme['button-outline-background-color'], ";\n        color: ").concat(theme['button-outline-content-color'], ";\n        box-shadow: ").concat(theme['button-outline-border-color'], ";\n        svg path {\n          fill: ").concat(theme['button-outline-border-color'], ";\n        }\n\n        & .aether-button__loader rect {\n          fill: ").concat(theme['content-color-tertiary'], ";\n        }\n\n        &:hover {\n          box-shadow: ").concat(theme['button-outline-hover-border-color'], ";\n        }\n\n        &:active {\n          box-shadow: ").concat(theme['button-outline-active-border-color'], ";\n        }\n\n        &:disabled {\n          box-shadow: ").concat(theme['button-outline-disabled-border-color'], ";\n          color: ").concat(theme['button-outline-disabled-content-color'], ";\n          svg path {\n            fill: ").concat(theme['button-outline-disabled-content-color'], ";\n          }\n        }\n      ");

    case 'destructive':
      return "\n        background-color: ".concat(theme['button-destructive-background-color'], ";\n        color: ").concat(theme['button-destructive-content-color'], ";\n        font-weight: ").concat(theme['text-weight-medium'], ";\n        svg path {\n          fill: ").concat(theme['button-destructive-content-color'], ";\n        }\n\n        & .aether-button__loader rect {\n          fill: ").concat(theme['content-color-constant'], ";\n        }\n\n        &:hover {\n          background-color: ").concat(theme['button-destructive-hover-background-color'], ";\n        }\n\n        &:active {\n          background-color: ").concat(theme['button-destructive-active-background-color'], ";\n        }\n\n        &:disabled {\n          color: ").concat(theme['button-primary-disabled-content-color'], ";\n          background-color: ").concat(theme['button-destructive-disabled-background-color'], ";\n        }\n      ");

    case 'plain':
    case 'text':
      return "\n        padding: ".concat(theme['spacing-zero'], ";\n        border-radius: 0;\n        height: auto;\n        background-color: transparent;\n        color: ").concat(theme['button-plain-content-color'], ";\n        \n        & .aether-button__text {\n          border-bottom: ").concat(theme['button-plain-border'], ";\n        }\n\n        &:hover .aether-button__text {\n          border-bottom: ").concat(theme['button-plain-hover-border'], ";\n        }\n\n        &:active .aether-button__text {\n          border-bottom: ").concat(theme['button-plain-active-border'], ";\n        }\n        \n        &:disabled .aether-button__text {\n          color: ").concat(theme['button-plain-disabled-content-color'], ";\n          border-bottom: ").concat(theme['button-plain-disabled-border'], ";\n        }\n      ");

    case 'monochrome-plain':
    case 'monochrome-text':
      return "\n        padding: ".concat(theme['spacing-zero'], ";\n        border-radius: 0;\n        height: auto;\n        background-color: transparent;\n        color: ").concat(theme['button-monochrome-plain-content-color'], ";\n\n        & .aether-button__text {\n          border-bottom: ").concat(theme['button-monochrome-plain-border'], ";\n        }\n\n        &:hover .aether-button__text {\n          border-bottom: ").concat(theme['button-monochrome-plain-hover-border'], ";\n          color: ").concat(theme['button-monochrome-plain-hover-content-color'], ";\n        }\n\n        &:active .aether-button__text {\n          border-bottom: ").concat(theme['button-monochrome-plain-active-border'], ";\n        }\n        \n        &:disabled .aether-button__text {\n          color: ").concat(theme['button-monochrome-plain-disabled-content-color'], ";\n          border-bottom: ").concat(theme['button-monochrome-plain-disabled-border'], ";\n        }\n      ");

    case 'muted-plain':
    case 'muted-text':
      return "\n        padding: ".concat(theme['spacing-zero'], ";\n        border-radius: 0;\n        height: auto;\n        background-color: transparent;\n        color: ").concat(theme['button-muted-plain-content-color'], ";\n\n        & .aether-button__text {\n          border-bottom: ").concat(theme['button-muted-plain-border'], ";\n        }\n\n        &:hover .aether-button__text {\n          border-bottom: ").concat(theme['button-muted-plain-hover-border'], ";\n        }\n\n        &:active .aether-button__text {\n          border-bottom: ").concat(theme['button-muted-plain-active-border'], ";\n        }\n        \n        &:disabled .aether-button__text {\n          color: ").concat(theme['button-muted-plain-disabled-content-color'], ";\n          border-bottom: ").concat(theme['button-muted-plain-disabled-border'], ";\n        }\n      ");

    default:
      return null;
  }
}

var StyledButtonWrapper = styled.div.withConfig({
  displayName: "Button__StyledButtonWrapper",
  componentId: "sc-1lbqkyz-0"
})(["display:inline-block;border-radius:", ";&:focus{outline:none;box-shadow:", ";}"], function (props) {
  return props.theme['border-radius-default'];
}, function (props) {
  return props.theme['button-focus-border-color'];
});
var StyledButton = styled.button.withConfig({
  displayName: "Button__StyledButton",
  componentId: "sc-1lbqkyz-1"
})(["position:relative;box-sizing:border-box;display:inline-flex;justify-content:center;align-items:center;cursor:pointer;user-select:none;outline:none;border:none;border-radius:", ";font-size:", ";font-family:", ";line-height:1.4;& .aether-button__left-icon:not(:last-child){margin-right:6px;}& .aether-button__right-icon{margin-left:2px;}& .aether-button__loader{position:absolute;}", ";", ";", " &:hover,&:active{box-sizing:border-box;}&:focus{outline:none;box-shadow:", ";}", ""], function (props) {
  return props.theme['border-radius-default'];
}, function (props) {
  return props.theme['text-size-m'];
}, function (props) {
  return props.theme['text-family-default'];
}, function (props) {
  return getButtonSizeStyles(props.size, props.minWidth, props.fullWidth, props.theme);
}, function (props) {
  return getButtonStyles(props.type, props.theme);
}, function (props) {
  if (!props.text && (props.icon || props.rightIcon)) {
    return "padding: ".concat(props.theme['spacing-zero'], " ").concat(props.theme['spacing-s'], ";");
  }

  return '';
}, function (props) {
  return props.theme['button-focus-border-color'];
}, mixins.includeDisabledState());
var StyledButtonText = styled.span.withConfig({
  displayName: "Button__StyledButtonText",
  componentId: "sc-1lbqkyz-2"
})(["visibility:", ";"], function (props) {
  return props.isLoading ? 'hidden' : 'visible';
});
var StyledButtonIcon = styled(Icon).withConfig({
  displayName: "Button__StyledButtonIcon",
  componentId: "sc-1lbqkyz-3"
})(["visibility:", ";"], function (props) {
  return props.isLoading ? 'hidden' : 'visible';
});

function Button(props) {
  var innerRef = props.innerRef,
      icon = props.icon,
      rightIcon = props.rightIcon,
      size = props.size,
      type = props.type,
      text = props.text,
      minWidth = props.minWidth,
      fullWidth = props.fullWidth,
      isDisabled = props.isDisabled,
      isLoading = props.isLoading,
      hideLoader = props.hideLoader,
      onClick = props.onClick,
      onFocus = props.onFocus,
      onBlur = props.onBlur,
      className = props.className,
      tooltip = props.tooltip,
      shortcutLabel = props.shortcutLabel;

  var handleOnClick = function handleOnClick(event) {
    if (onClick) {
      onClick(event);
    }
  };

  var handleOnMouseDown = function handleOnMouseDown(event) {
    event.preventDefault();
  };

  var handleOnFocus = function handleOnFocus(event) {
    if (onFocus) onFocus(event);
  };

  var handleOnBlur = function handleOnBlur(event) {
    if (onBlur) onBlur(event);
  };

  if (tooltip || shortcutLabel) {
    var customTooltipProps = {};

    if (tooltip && /*#__PURE__*/React.isValidElement(tooltip) && tooltip.type === Tooltip) {
      // eslint-disable-next-line no-unused-vars
      var _tooltip$props = tooltip.props,
          content = _tooltip$props.content,
          restOfTheProps = _objectWithoutProperties(_tooltip$props, _excluded);

      customTooltipProps = _objectSpread({
        tooltip: content
      }, restOfTheProps);
    }

    var tooltipText = typeof tooltip === 'string' ? tooltip : tooltip.content; // Do not remove the StyledButtonWrapper, it is need to show tooltip even
    // when button is disabled, refer this: https://postmanlabs.atlassian.net/browse/DSUI-844

    return /*#__PURE__*/React.createElement(ButtonTooltip, _extends({
      tooltip: tooltipText,
      shortcut: shortcutLabel,
      placement: tooltip.placement || 'bottom' // eslint-disable-next-line react/jsx-props-no-spreading

    }, customTooltipProps), isDisabled ? /*#__PURE__*/React.createElement(StyledButtonWrapper, {
      tabIndex: "0"
    }, /*#__PURE__*/React.createElement(StyledButton, {
      onClick: handleOnClick,
      size: size,
      type: type,
      disabled: isDisabled || isLoading,
      icon: icon,
      rightIcon: rightIcon,
      text: text,
      minWidth: minWidth,
      fullWidth: fullWidth,
      onMouseDown: handleOnMouseDown,
      onBlur: handleOnBlur,
      onFocus: handleOnFocus,
      className: className,
      ref: innerRef
    }, isLoading && !hideLoader && /*#__PURE__*/React.createElement(Spinner, {
      className: "aether-button__loader"
    }), icon && /*#__PURE__*/React.createElement(StyledButtonIcon, {
      isLoading: isLoading,
      size: getIconSize(size),
      name: icon,
      className: "aether-button__left-icon"
    }), text && /*#__PURE__*/React.createElement(StyledButtonText, {
      isLoading: isLoading,
      className: "aether-button__text"
    }, text), rightIcon && /*#__PURE__*/React.createElement(StyledButtonIcon, {
      isLoading: isLoading,
      size: getIconSize(size),
      name: rightIcon,
      className: "aether-button__right-icon"
    }))) : /*#__PURE__*/React.createElement(StyledButton, {
      onClick: handleOnClick,
      size: size,
      type: type,
      disabled: isDisabled || isLoading,
      icon: icon,
      rightIcon: rightIcon,
      text: text,
      minWidth: minWidth,
      fullWidth: fullWidth,
      onMouseDown: handleOnMouseDown,
      onBlur: handleOnBlur,
      onFocus: handleOnFocus,
      className: className,
      ref: innerRef
    }, isLoading && !hideLoader && /*#__PURE__*/React.createElement(Spinner, {
      className: "aether-button__loader"
    }), icon && /*#__PURE__*/React.createElement(StyledButtonIcon, {
      isLoading: isLoading,
      size: getIconSize(size),
      name: icon,
      className: "aether-button__left-icon"
    }), text && /*#__PURE__*/React.createElement(StyledButtonText, {
      isLoading: isLoading,
      className: "aether-button__text"
    }, text), rightIcon && /*#__PURE__*/React.createElement(StyledButtonIcon, {
      isLoading: isLoading,
      size: getIconSize(size),
      name: rightIcon,
      className: "aether-button__right-icon"
    })));
  }

  return /*#__PURE__*/React.createElement(StyledButton, {
    onClick: handleOnClick,
    size: size,
    type: type,
    disabled: isDisabled || isLoading,
    icon: icon,
    rightIcon: rightIcon,
    text: text,
    minWidth: minWidth,
    fullWidth: fullWidth,
    onMouseDown: handleOnMouseDown,
    onBlur: handleOnBlur,
    onFocus: handleOnFocus,
    className: className,
    ref: innerRef
  }, isLoading && !hideLoader && /*#__PURE__*/React.createElement(Spinner, {
    className: "aether-button__loader"
  }), icon && /*#__PURE__*/React.createElement(StyledButtonIcon, {
    isLoading: isLoading,
    size: getIconSize(size),
    name: icon,
    className: "aether-button__left-icon"
  }), text && /*#__PURE__*/React.createElement(StyledButtonText, {
    isLoading: isLoading,
    className: "aether-button__text"
  }, text), rightIcon && /*#__PURE__*/React.createElement(StyledButtonIcon, {
    isLoading: isLoading,
    size: getIconSize(size),
    name: rightIcon,
    className: "aether-button__right-icon"
  }));
}

export default /*#__PURE__*/React.forwardRef(function (props, ref) {
  // eslint-disable-next-line react/jsx-props-no-spreading
  return /*#__PURE__*/React.createElement(Button, _extends({}, props, {
    innerRef: ref
  }));
});
Button.defaultProps = {
  innerRef: null,
  onClick: function onClick() {},
  tooltip: '',
  shortcutLabel: '',
  type: 'secondary',
  text: '',
  size: 'medium',
  icon: '',
  rightIcon: '',
  isDisabled: false,
  isLoading: false,
  minWidth: '',
  fullWidth: false,
  onFocus: null,
  onBlur: null,
  className: '',
  hideLoader: false
};
Button.propTypes = {
  onClick: PropTypes.func,
  type: PropTypes.oneOf(VALID_BUTTON_TYPES),
  size: PropTypes.oneOf(BUTTON_SIZES),
  isDisabled: PropTypes.bool,
  isLoading: PropTypes.bool,
  hideLoader: PropTypes.bool,
  text: function text(props) {
    var text = props.text,
        icon = props.icon;

    if (!text && !icon) {
      return new Error('Button: The props "icon" and "text" cannot be left empty at the same time. Please provide a valid value for at least one of them.');
    }

    if (text && typeof text !== 'string') {
      return new Error("Button: Expected text Prop to be of type string but got ".concat(_typeof(text)));
    }

    return null;
  },
  icon: PropTypes.oneOf([].concat(_toConsumableArray(LIST_OF_ICONS), [''])),
  rightIcon: PropTypes.oneOf([].concat(_toConsumableArray(LIST_OF_ICONS), [''])),
  innerRef: PropTypes.object,
  tooltip: PropTypes.node,
  shortcutLabel: PropTypes.string,
  minWidth: PropTypes.string,
  fullWidth: PropTypes.bool,
  className: PropTypes.string,
  onFocus: PropTypes.func,
  onBlur: PropTypes.func
};