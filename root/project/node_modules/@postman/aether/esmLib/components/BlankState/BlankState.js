import React from 'react';
import styled from 'styled-components';
import PropTypes from 'prop-types';
import Flex from '../Flex/Flex';
import Button from '../Button/Button';
import Text from '../Text/Text';
import Heading from '../Heading/Heading';
var StyledBlankStateWrapper = styled.div.withConfig({
  displayName: "BlankState__StyledBlankStateWrapper",
  componentId: "sc-h2snuq-0"
})(["height:100%;width:100%;display:flex;justify-content:center;align-items:center;background-color:transparent;"]);
var StyledBlankState = styled(Flex).withConfig({
  displayName: "BlankState__StyledBlankState",
  componentId: "sc-h2snuq-1"
})(["max-width:480px;"]);
var BlankStateInfo = styled.div.withConfig({
  displayName: "BlankState__BlankStateInfo",
  componentId: "sc-h2snuq-2"
})(["text-align:center;& > *:not(:last-child){margin-bottom:", ";}.blank-state__title{margin-bottom:", ";}"], function (props) {
  return props.theme['spacing-xl'];
}, function (props) {
  return props.theme['spacing-s'];
});
var ActionsContainer = styled(Flex).withConfig({
  displayName: "BlankState__ActionsContainer",
  componentId: "sc-h2snuq-3"
})(["width:max-content;.aether-blank-state__button{font-size:", ";line-height:1.4;width:100%;}"], function (props) {
  return props.theme['text-size-m'];
});
export default function BlankState(props) {
  var className = props.className,
      title = props.title,
      description = props.description,
      children = props.children,
      primaryAction = props.primaryAction,
      secondaryAction = props.secondaryAction;

  var renderPrimaryAction = function renderPrimaryAction(primaryActionComp) {
    if (primaryActionComp && /*#__PURE__*/React.isValidElement(primaryActionComp) && (primaryActionComp.type === Button || primaryActionComp.type === Text)) {
      return /*#__PURE__*/React.cloneElement(primaryActionComp, {
        className: 'aether-blank-state__button'
      });
    }

    return null;
  };

  var renderSecondaryAction = function renderSecondaryAction(secondaryActionComp) {
    if (secondaryActionComp && /*#__PURE__*/React.isValidElement(secondaryActionComp) && (secondaryActionComp.type === Button || secondaryActionComp.type === Text)) {
      return /*#__PURE__*/React.cloneElement(secondaryActionComp, {
        className: 'aether-blank-state__button'
      });
    }

    return null;
  };

  return /*#__PURE__*/React.createElement(StyledBlankStateWrapper, null, /*#__PURE__*/React.createElement(StyledBlankState, {
    direction: "column",
    gap: "spacing-l",
    alignItems: "center",
    padding: "spacing-xl",
    width: "max-content",
    className: className
  }, children, /*#__PURE__*/React.createElement(BlankStateInfo, null, /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Heading, {
    type: "h3",
    styleAs: "h4",
    text: title,
    className: "blank-state__title"
  }), typeof description === 'string' ? /*#__PURE__*/React.createElement(Text, {
    type: "para"
  }, description) : description), /*#__PURE__*/React.createElement(Flex, {
    justifyContent: "center"
  }, /*#__PURE__*/React.createElement(ActionsContainer, {
    direction: "column",
    gap: "spacing-m",
    alignItems: "center"
  }, renderPrimaryAction(primaryAction), renderSecondaryAction(secondaryAction))))));
}
BlankState.defaultProps = {
  title: '',
  description: '',
  className: '',
  children: null,
  primaryAction: null,
  secondaryAction: null
};
BlankState.propTypes = {
  title: PropTypes.string,
  description: PropTypes.node,
  className: PropTypes.string,
  children: PropTypes.node,
  primaryAction: function primaryAction(props) {
    var primaryAction = props.primaryAction;

    if (primaryAction) {
      if (!(primaryAction.type === Button || primaryAction.type === Text)) return new Error("BlankState: primaryAction prop only accepts Aether's Button or Text component as valid value.");
    }

    return null;
  },
  secondaryAction: function secondaryAction(props) {
    var secondaryAction = props.secondaryAction;

    if (secondaryAction) {
      if (!(secondaryAction.type === Button || secondaryAction.type === Text)) return new Error("BlankState: primaryAction prop only accepts Aether's Button or Text component as valid value.");
    }

    return null;
  }
};