function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import React, { useState } from 'react';
import styled from 'styled-components';
import propTypes from 'prop-types';
import Text from '../Text/Text';
import Label from '../Label/Label';
/**
 * @description This function dynamically decides the border style of Radio
 * @param {boolean} isChecked holds the checked status of radio
 * @param {boolean} isDisabled holds the disabled status of radio
 */

function getBorderStyle(isChecked, isDisabled, theme) {
  var borderStyle;
  borderStyle = isChecked ? "".concat(theme['border-width-default'], " ").concat(theme['border-style-solid'], " transparent") : "".concat(theme['border-width-default'], " ").concat(theme['border-style-solid'], " ").concat(theme['radio-border-color']);
  if (isDisabled) borderStyle = "".concat(theme['border-width-default'], " ").concat(theme['border-style-solid'], " ").concat(theme['radio-disabled-border-color']);
  return borderStyle;
}
/**
 * @description This function decides background color of Radio
 * @param {boolean} isChecked holds the checked status of radio
 * @param {boolean} isDisabled specifies whether the radio is disabled or not
 * @param {object} theme holds the current theme values
 */


function defineRadioColor(isChecked, isDisabled, theme) {
  if (isChecked) {
    if (isDisabled) {
      return theme['radio-disabled-checked-background-color'];
    }

    return theme['radio-checked-color'];
  }

  return 'transparent';
} // styled component for main Radio container


var StyledRadioActionableContainer = styled.span.withConfig({
  displayName: "Radio__StyledRadioActionableContainer",
  componentId: "sc-1u39c4i-0"
})(["position:relative;cursor:pointer;user-select:none;display:flex;width:max-content;align-items:center;& *{", "}"], function (props) {
  return props.isDisabled ? 'cursor: not-allowed;' : 'cursor: pointer';
}); // styled component for label and helper text container

var StyledRadioDummy = styled.span.withConfig({
  displayName: "Radio__StyledRadioDummy",
  componentId: "sc-1u39c4i-1"
})(["height:14px;width:14px;border:", ";border-radius:", ";background-color:", ";box-sizing:border-box;z-index:1;display:flex;justify-content:center;align-items:center;margin-right:", ";", ""], function (props) {
  return getBorderStyle(props.isChecked, props.isDisabled, props.theme);
}, function (props) {
  return props.theme[['border-radius-max']];
}, function (props) {
  return defineRadioColor(props.isChecked, props.isDisabled, props.theme);
}, function (props) {
  return props.theme['spacing-s'];
}, function (props) {
  if (props.isChecked) {
    return "\n        &:before {\n          content: \"\";\n          border-radius: 100%;\n          border: 3px ".concat(props.theme['border-style-solid'], " ").concat(props.theme['content-color-constant'], ";\n        }\n      ");
  }

  return "";
}); // Container for Input Radio

var StyledInputRadio = styled.input.attrs({
  type: 'radio'
}).withConfig({
  displayName: "Radio__StyledInputRadio",
  componentId: "sc-1u39c4i-2"
})(["margin:0;height:14px;width:14px;position:absolute;appearance:none;&:focus{box-shadow:0px 0px 0px 1px #ffffff,0px 0px 0px 3px #adcdfb;outline:none;border-radius:", ";}"], function (props) {
  return props.theme[['border-radius-max']];
}); // container for helper Texts

var StyledHelperTextContainer = styled.span.withConfig({
  displayName: "Radio__StyledHelperTextContainer",
  componentId: "sc-1u39c4i-3"
})(["margin-left:22px;"]);
var StyledRadioContainer = styled.div.withConfig({
  displayName: "Radio__StyledRadioContainer",
  componentId: "sc-1u39c4i-4"
})(["width:max-content;"]);
export default function Radio(props) {
  var label = props.label,
      id = props.id,
      name = props.name,
      value = props.value,
      _isChecked = props._isChecked,
      helperText = props.helperText,
      isDisabled = props.isDisabled,
      className = props.className,
      onChange = props.onChange,
      onMouseDown = props.onMouseDown,
      onMouseUp = props.onMouseUp,
      onFocus = props.onFocus,
      onBlur = props.onBlur,
      onMouseEnter = props.onMouseEnter,
      onMouseLeave = props.onMouseLeave; // state for maintaining user interaction which is the source of generating all styles

  var _useState = useState('default'),
      _useState2 = _slicedToArray(_useState, 2),
      interactionState = _useState2[0],
      setInteractionState = _useState2[1];

  var ariaChecked = _isChecked ? 'true' : 'false';

  var handleOnChange = function handleOnChange(event) {
    // stopping unnecessary Fn calls when radio is disabled
    if (!isDisabled) {
      if (onChange) onChange(value, event);
    }
  };

  var handleOnMouseEnter = function handleOnMouseEnter(event) {
    // stopping unnecessary Fn calls when radio is disabled
    if (!isDisabled) {
      setInteractionState('hover');
      if (onMouseEnter) onMouseEnter(event);
    }
  };

  var handleOnMouseLeave = function handleOnMouseLeave(event) {
    // stopping unnecessary Fn calls when radio is disabled
    if (!isDisabled) {
      setInteractionState('default');
      if (onMouseLeave) onMouseLeave(event);
    }
  };

  var handleOnMouseDown = function handleOnMouseDown(event) {
    // stopping unnecessary Fn calls when radio is disabled
    if (!isDisabled) {
      setInteractionState('active');
      if (onMouseDown) onMouseDown(event);
    }
  };

  var handleOnMouseUp = function handleOnMouseUp(event) {
    // stopping unnecessary Fn calls when radio is disabled
    if (!isDisabled) {
      if (onMouseUp) onMouseUp(event);
    }
  };

  var handleOnFocus = function handleOnFocus(event) {
    // stopping unnecessary Fn calls when radio is disabled
    if (!isDisabled) {
      setInteractionState('focus');
      if (onFocus) onFocus(event);
    }
  };

  var handleOnBlur = function handleOnBlur(event) {
    // stopping unnecessary Fn calls when radio is disabled
    if (!isDisabled) {
      if (onBlur) onBlur(event);
      setInteractionState('default');
    }
  };

  return /*#__PURE__*/React.createElement(StyledRadioContainer, {
    className: className
  }, /*#__PURE__*/React.createElement(StyledRadioActionableContainer, {
    isDisabled: isDisabled,
    onClick: handleOnChange,
    onMouseEnter: handleOnMouseEnter,
    onMouseLeave: handleOnMouseLeave,
    onMouseDown: handleOnMouseDown,
    onMouseUp: handleOnMouseUp,
    onBlur: handleOnBlur,
    onFocus: handleOnFocus,
    "aria-checked": ariaChecked,
    role: "radio"
  }, /*#__PURE__*/React.createElement(StyledRadioDummy, {
    isChecked: _isChecked,
    isDisabled: isDisabled,
    interactionState: interactionState
  }), /*#__PURE__*/React.createElement(StyledInputRadio, {
    id: id,
    name: name,
    value: value
  }),
  /* label component */
  label ? /*#__PURE__*/React.createElement(Label, {
    htmlFor: id,
    isDisabled: isDisabled,
    type: "optionSelector",
    text: label
  }) : ''),
  /* helper text component */
  label && helperText ? /*#__PURE__*/React.createElement(StyledHelperTextContainer, null, /*#__PURE__*/React.createElement(Text, {
    type: "body-small",
    color: "content-color-secondary"
  }, helperText)) : '');
}
Radio.defaultProps = {
  _isChecked: false,
  id: null,
  name: null,
  onChange: null,
  value: null,
  className: '',
  helperText: '',
  isDisabled: false,
  onMouseDown: null,
  onMouseUp: null,
  onFocus: null,
  onBlur: null,
  onMouseEnter: null,
  onMouseLeave: null
};
Radio.propTypes = {
  _isChecked: propTypes.bool,
  id: propTypes.string,
  name: propTypes.string,
  value: propTypes.string,
  label: propTypes.string.isRequired,
  helperText: propTypes.string,
  isDisabled: propTypes.bool,
  onChange: propTypes.func,
  onMouseEnter: propTypes.func,
  onMouseLeave: propTypes.func,
  onMouseDown: propTypes.func,
  onMouseUp: propTypes.func,
  onFocus: propTypes.func,
  onBlur: propTypes.func,
  className: propTypes.string
};