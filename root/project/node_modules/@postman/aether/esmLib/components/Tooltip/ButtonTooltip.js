var _excluded = ["children", "tooltip", "shortcut"];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import styled from 'styled-components';
import propTypes from 'prop-types';
import Tooltip from './Tooltip';
var StyledButtonTooltip = styled(Tooltip).withConfig({
  displayName: "ButtonTooltip__StyledButtonTooltip",
  componentId: "sc-dyk4qc-0"
})(["&&{.tippy-content{font-size:", ";line-height:", ";text-align:center;padding:", ";}& .aether-btn-tooltip__primary-text{color:", ";font-weight:", ";}& .aether-btn-tooltip__shortcut{color:", ";}}"], function (props) {
  return props.theme['text-size-s'];
}, function (props) {
  return props.theme['line-height-s'];
}, function (props) {
  return "6px ".concat(props.theme['spacing-s']);
}, function (props) {
  return props.theme['content-color-primary'];
}, function (props) {
  return props.theme['text-weight-medium'];
}, function (props) {
  return props.theme['content-color-secondary'];
});

function getTooltipContentMarkup(tooltip, shortcut) {
  return /*#__PURE__*/React.createElement(React.Fragment, null, tooltip && /*#__PURE__*/React.createElement("div", {
    className: "aether-btn-tooltip__primary-text"
  }, tooltip), shortcut && /*#__PURE__*/React.createElement("div", {
    className: "aether-btn-tooltip__shortcut"
  }, shortcut));
}

export default function ButtonTooltip(props) {
  var children = props.children,
      tooltip = props.tooltip,
      shortcut = props.shortcut,
      restOfTheProps = _objectWithoutProperties(props, _excluded);

  var tooltipContentMarkup = getTooltipContentMarkup(tooltip, shortcut);
  return (
    /*#__PURE__*/
    // eslint-disable-next-line react/jsx-props-no-spreading
    React.createElement(StyledButtonTooltip, _extends({
      content: tooltipContentMarkup
    }, restOfTheProps), children)
  );
}
ButtonTooltip.defaultProps = {
  children: null,
  tooltip: '',
  shortcut: ''
};
ButtonTooltip.propTypes = {
  tooltip: propTypes.node,
  shortcut: propTypes.string,
  children: propTypes.oneOfType([propTypes.arrayOf(propTypes.node), propTypes.node])
};