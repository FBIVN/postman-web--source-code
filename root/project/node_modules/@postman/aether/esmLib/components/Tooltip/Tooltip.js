import React from 'react';
import styled from 'styled-components';
import PropTypes from 'prop-types';
import Tippy from '@tippyjs/react';
export var TOOLTIP_PLACEMENT_POSITIONS = ['auto', 'top', 'top-start', 'top-end', 'bottom', 'bottom-start', 'bottom-end', 'left', 'left-start', 'left-end', 'right', 'right-start', 'right-end'];
var StyledTooltip = styled(Tippy).withConfig({
  displayName: "Tooltip__StyledTooltip",
  componentId: "sc-7dt6zd-0"
})(["& .tippy-content{background-color:", ";color:", ";border:", ";border-radius:", ";padding:", ";box-shadow:", ";font-family:", ";font-size:", ";line-height:18px;font-weight:", ";text-align:left;word-break:break-word;}"], function (props) {
  return props.theme['background-color-tertiary'];
}, function (props) {
  return props.theme['content-color-primary'];
}, function (props) {
  return "".concat(props.theme['border-width-default'], " ").concat(props.theme['border-style-solid'], " ").concat(props.theme['tooltip-border-color']);
}, function (props) {
  return props.theme['border-radius-default'];
}, function (props) {
  return "".concat(props.theme['spacing-s'], " ").concat(props.theme['spacing-m']);
}, function (props) {
  return props.theme['tooltip-box-shadow'];
}, function (props) {
  return props.theme['text-family-default'];
}, function (props) {
  return props.theme['text-size-m'];
}, function (props) {
  return props.theme['text-weight-regular'];
});
export default function Tooltip(props) {
  var content = props.content,
      ariaLabel = props['aria-label'],
      placement = props.placement,
      triggerEvent = props.triggerEvent,
      isInteractive = props.isInteractive,
      maxWidth = props.maxWidth,
      openDelay = props.openDelay,
      closeDelay = props.closeDelay,
      className = props.className,
      children = props.children;
  return /*#__PURE__*/React.createElement(StyledTooltip, {
    content: content,
    placement: placement,
    "aria-label": ariaLabel,
    trigger: triggerEvent,
    interactive: isInteractive,
    delay: [openDelay, closeDelay],
    maxWidth: maxWidth,
    className: className,
    arrow: false,
    offset: [0, 4]
  }, children);
}
Tooltip.defaultProps = {
  'aria-label': 'Tooltip',
  placement: 'top',
  children: null,
  triggerEvent: 'mouseenter focus',
  isInteractive: false,
  className: '',
  maxWidth: 220,
  openDelay: 100,
  closeDelay: 100
};
Tooltip.propTypes = {
  content: PropTypes.node.isRequired,
  'aria-label': PropTypes.string,
  placement: PropTypes.oneOf(TOOLTIP_PLACEMENT_POSITIONS),
  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]),
  triggerEvent: PropTypes.string,
  isInteractive: PropTypes.bool,
  maxWidth: PropTypes.number,
  openDelay: PropTypes.number,
  closeDelay: PropTypes.number,
  className: PropTypes.string
};