function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import React, { useState, useEffect } from 'react';
import styled from 'styled-components';
import PropTypes from 'prop-types';
import Text from '../Text/Text';
var StyledBreadcrumbDropdownContainer = styled.ul.withConfig({
  displayName: "BreadcrumbDropdown__StyledBreadcrumbDropdownContainer",
  componentId: "sc-rlamlu-0"
})(["list-style:none;padding:", " ", ";margin:", ";min-width:120px;max-height:128px;overflow-y:scroll;outline:none;"], function (props) {
  return props.theme['spacing-s'];
}, function (props) {
  return props.theme['spacing-zero'];
}, function (props) {
  return props.theme['spacing-zero'];
});
var StyledDropdownItemContainer = styled.li.withConfig({
  displayName: "BreadcrumbDropdown__StyledDropdownItemContainer",
  componentId: "sc-rlamlu-1"
})(["background-color:transparent;transition:background-color 0.2s ease-in-out;padding:", " ", ";color:", ";", ";"], function (props) {
  return props.theme['spacing-xs'];
}, function (props) {
  return props.theme['spacing-l'];
}, function (props) {
  return props.theme['content-color-primary'];
}, function (props) {
  return props.isActive && "background-color: ".concat(props.theme['highlight-background-color-secondary'], "}; \n    cursor: pointer;\n    ");
});
export function BreadcrumbDropdownItem(props) {
  var children = props.children,
      itemData = props.itemData,
      itemId = props.itemId,
      isActive = props.isActive,
      getHoveredItemId = props.getHoveredItemId,
      onItemClick = props.onItemClick,
      hideDropdown = props.hideDropdown;

  function handleOnHover() {
    getHoveredItemId(itemId);
  }

  var handleClick = function handleClick(event) {
    if (onItemClick) onItemClick(itemData, event);
    hideDropdown();
  };

  function handleOnLeave() {
    getHoveredItemId(-1);
  }

  if (typeof children === 'string') {
    return /*#__PURE__*/React.createElement(StyledDropdownItemContainer, {
      isActive: isActive,
      onMouseEnter: handleOnHover,
      onMouseLeave: handleOnLeave,
      onClick: handleClick
    }, /*#__PURE__*/React.createElement(Text, {
      color: "content-color-primary"
    }, children));
  }

  return /*#__PURE__*/React.createElement(StyledDropdownItemContainer, {
    isActive: isActive,
    onMouseEnter: handleOnHover,
    onClick: handleClick
  }, children);
}
BreadcrumbDropdownItem.defaultProps = {
  itemData: {},
  isActive: false,
  getHoveredItemId: null,
  onItemClick: null,
  hideDropdown: null
};
BreadcrumbDropdownItem.propTypes = {
  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]).isRequired,
  itemId: PropTypes.number.isRequired,
  isActive: PropTypes.bool,
  getHoveredItemId: PropTypes.func,
  hideDropdown: PropTypes.func,
  onItemClick: PropTypes.func,
  // eslint-disable-next-line react/forbid-prop-types
  itemData: PropTypes.object
};
export function BreadcrumbDropdown(props) {
  var children = props.children,
      isDropdownOpen = props.isDropdownOpen,
      onItemClick = props.onItemClick,
      hideDropdown = props.hideDropdown;

  var _useState = useState(-1),
      _useState2 = _slicedToArray(_useState, 2),
      activeItemId = _useState2[0],
      setActiveItemId = _useState2[1];

  var dropdownRef = React.useRef();
  useEffect(function () {
    if (isDropdownOpen) {
      if (dropdownRef.current) dropdownRef.current.focus();
    }
  }, [isDropdownOpen]);

  var handleOnBlur = function handleOnBlur() {
    hideDropdown();
  };

  var getHoveredItemId = function getHoveredItemId(id) {
    setActiveItemId(id);
  };

  var handleOnKeyDown = function handleOnKeyDown(e) {
    if (isDropdownOpen) {
      // handle up / down arrow key events
      if (e.keyCode === 38) {
        // up arrow key pressed
        e.preventDefault();
        setActiveItemId(activeItemId === 0 || activeItemId === -1 ? React.Children.toArray(children).length - 1 : activeItemId - 1);
      } else if (e.keyCode === 40) {
        e.preventDefault();
        setActiveItemId(activeItemId === -1 ? 0 : (activeItemId + 1) % React.Children.toArray(children).length);
      } else if (e.keyCode === 13) {
        // enter key pressed
        e.preventDefault();

        if (activeItemId !== -1) {
          var childrenArray = React.Children.toArray(children);
          onItemClick(childrenArray[activeItemId].props.itemData, e);
        }

        hideDropdown();
      }
    }
  }; // let the hovered child know its it needs to be active


  var clonedChildren = React.Children.map(children, function (child, index) {
    if (index === activeItemId) {
      return /*#__PURE__*/React.cloneElement(child, {
        isActive: true,
        getHoveredItemId: getHoveredItemId,
        hideDropdown: hideDropdown
      });
    }

    return /*#__PURE__*/React.cloneElement(child, {
      isActive: false,
      getHoveredItemId: getHoveredItemId,
      hideDropdown: hideDropdown
    });
  });
  return /*#__PURE__*/React.createElement(StyledBreadcrumbDropdownContainer, {
    tabIndex: 0,
    ref: dropdownRef,
    onBlur: handleOnBlur,
    onKeyDown: handleOnKeyDown
  }, clonedChildren);
}
BreadcrumbDropdown.defaultProps = {
  isDropdownOpen: false,
  onItemClick: null,
  hideDropdown: null
};
BreadcrumbDropdown.propTypes = {
  children: PropTypes.arrayOf(PropTypes.shape({
    type: PropTypes.oneOf([BreadcrumbDropdownItem])
  })).isRequired,
  isDropdownOpen: PropTypes.bool,
  onItemClick: PropTypes.func,
  hideDropdown: PropTypes.func
};