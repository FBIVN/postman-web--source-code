import React from 'react';
import styled from 'styled-components';
import PropTypes from 'prop-types';
import Text from '../Text/Text';
var LIST_TYPE_CONSTANTS = ['ordered', 'unordered'];
var StyledListContainer = styled.ol.withConfig({
  displayName: "List__StyledListContainer",
  componentId: "sc-1y3de0i-0"
})(["margin:", " ", ";padding:", ";"], function (props) {
  return props.theme['spacing-zero'];
}, function (props) {
  return props.theme['spacing-xl'];
}, function (props) {
  return props.theme['spacing-zero'];
});
var StyledListItemContainer = styled.li.withConfig({
  displayName: "List__StyledListItemContainer",
  componentId: "sc-1y3de0i-1"
})(["color:", ";font-size:", ";line-height:", ";display:list-item;& ol,& ul{margin-top:", ";margin-bottom:", ";}&::marker{color:", ";}margin-bottom:", ";"], function (props) {
  return props.theme['content-color-secondary'];
}, function (props) {
  return props.theme['text-size-m'];
}, function (props) {
  return props.theme['line-height-m'];
}, function (props) {
  return props.theme['spacing-s'];
}, function (props) {
  return props.theme['spacing-s'];
}, function (props) {
  return props.theme['content-color-tertiary'];
}, function (props) {
  return props.theme['spacing-s'];
});

function ListItem(props) {
  var children = props.children;
  return /*#__PURE__*/React.createElement(StyledListItemContainer, null, children);
}

function List(props) {
  var children = props.children,
      type = props.type,
      className = props.className;
  return /*#__PURE__*/React.createElement(StyledListContainer, {
    className: className,
    as: type === 'unordered' ? 'ul' : 'ol'
  }, children);
}

ListItem.defaultProps = {
  children: null
};
ListItem.propTypes = {
  children: function children(_ref) {
    var _children = _ref.children;

    if (!_children) {
      return new Error('ListItem: children prop cannot be left empty.');
    }

    var isErrorMsg = false;

    if (Array.isArray(_children)) {
      _children.forEach(function (child) {
        if (!(typeof child === 'string' || child.type === Text || child.type === List)) {
          isErrorMsg = true;
        }
      });
    } // check if children has only one element and its not of any other type
    else if (!(typeof _children === 'string' || _children.type === Text || _children.type === List)) {
      return new Error('ListItem: ListItem children prop accepts Text, a string or List component as children');
    }

    if (isErrorMsg) {
      return new Error('ListItem: ListItem children prop accepts Text, a string or List component as children');
    }

    return null;
  }
};
List.defaultProps = {
  type: 'ordered',
  className: '',
  children: null
};
List.propTypes = {
  type: PropTypes.oneOf(LIST_TYPE_CONSTANTS),
  children: function children(_ref2) {
    var _children2 = _ref2.children;

    if (!_children2) {
      return new Error('List: children prop cannot be left empty.');
    }

    var isErrorMsg = false;

    _children2.forEach(function (child) {
      if (child.type !== ListItem) {
        isErrorMsg = true;
      }
    });

    if (isErrorMsg) {
      return new Error('List: should only have Listitem as child');
    }

    return null;
  },
  className: PropTypes.string
};
export { List, ListItem };