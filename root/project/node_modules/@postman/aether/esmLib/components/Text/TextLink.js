import React from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';
import Icon from '../Icon/Icon';
export var TEXT_LINK_VARIANTS = ['link-default', 'link-subtle', 'link-primary', 'link-button', 'link-button-primary', 'link-button-outline'];
/**
 * @description This function generates style for TextLink element based on type variant specified
 * @param {string} type holds type of the TextLink element
 * @param {Object} theme contains the theme dependent style properties
 */

function getTextLinkStyle(type, theme) {
  switch (type) {
    case 'link-primary':
      return "\n        color: ".concat(theme['content-color-link'], ";\n      ");

    case 'link-subtle':
      return "\n        color: inherit;\n      ";

    case 'link-button':
      return "\n        box-sizing: border-box;\n        justify-content: center;\n        color: ".concat(theme['button-secondary-content-color'], ";\n        background-color ").concat(theme['button-secondary-background-color'], ";\n        height: ").concat(theme['size-m'], ";\n        padding: ").concat(theme['spacing-s'], " ").concat(theme['spacing-l'], ";\n        border-radius: ").concat(theme['border-radius-default'], ";\n        svg path {\n          fill: ").concat(theme['button-secondary-content-color'], ";\n        }\n\n        &:hover {\n          background-color: ").concat(theme['button-secondary-hover-background-color'], ";\n          color: ").concat(theme['button-secondary-content-color'], ";\n          .aether-link-text {\n            border-bottom-width: ").concat(theme['border-width-default'], ";\n            border-bottom-style: ").concat(theme['border-style-solid'], ";\n            border-bottom-color: transparent;\n          }\n          svg path {\n            fill: ").concat(theme['button-secondary-content-color'], ";\n          }\n        }\n\n        &:active {\n          background-color: ").concat(theme['button-secondary-active-background-color'], ";\n          color: ").concat(theme['button-secondary-content-color'], ";\n          .aether-link-text {\n            border-bottom-width: ").concat(theme['border-width-default'], ";\n            border-bottom-style: ").concat(theme['border-style-solid'], ";\n            border-bottom-color: transparent;\n          }\n          svg path {\n            fill: ").concat(theme['button-secondary-content-color'], ";\n          }\n        }\n      ");

    case 'link-button-primary':
      return "\n        box-sizing: border-box;\n        justify-content: center;\n        color: ".concat(theme['button-primary-content-color'], ";\n        background-color ").concat(theme['button-primary-background-color'], ";\n        height: ").concat(theme['size-m'], ";\n        padding: ").concat(theme['spacing-s'], " ").concat(theme['spacing-l'], ";\n        border-radius: ").concat(theme['border-radius-default'], ";\n        font-weight: ").concat(theme['text-weight-medium'], ";\n        svg path {\n          fill: ").concat(theme['button-primary-content-color'], ";\n        }\n\n        &:hover {\n          background-color: ").concat(theme['button-primary-hover-background-color'], ";\n          color: ").concat(theme['button-primary-content-color'], ";\n          .aether-link-text {\n            border-bottom-width: ").concat(theme['border-width-default'], ";\n            border-bottom-style: ").concat(theme['border-style-solid'], ";\n            border-bottom-color: transparent;\n          }\n          svg path {\n            fill: ").concat(theme['button-primary-content-color'], ";\n          }\n        }\n\n        &:active {\n          background-color: ").concat(theme['button-primary-active-background-color'], ";\n          .aether-link-text {\n            border-bottom-width: ").concat(theme['border-width-default'], ";\n            border-bottom-style: ").concat(theme['border-style-solid'], ";\n            border-bottom-color: transparent;\n          }\n          svg path {\n            fill: ").concat(theme['button-primary-content-color'], ";\n          }\n        }\n      ");

    case 'link-button-outline':
      return "\n        box-sizing: border-box;\n        justify-content: center;\n        color: ".concat(theme['button-outline-content-color'], ";\n        background-color ").concat(theme['button-outline-background-color'], ";\n        box-shadow: ").concat(theme['button-outline-border-color'], ";\n        height: ").concat(theme['size-m'], ";\n        padding: ").concat(theme['spacing-s'], " ").concat(theme['spacing-l'], ";\n        border-radius: ").concat(theme['border-radius-default'], ";\n        svg path {\n          fill: ").concat(theme['button-outline-content-color'], ";\n        }\n\n        &:hover {\n          box-shadow: ").concat(theme['button-outline-hover-border-color'], ";\n          color: ").concat(theme['button-outline-content-color'], ";\n          .aether-link-text {\n            border-bottom-width: ").concat(theme['border-width-default'], ";\n            border-bottom-style: ").concat(theme['border-style-solid'], ";\n            border-bottom-color: transparent;\n          }\n          svg path {\n            fill: ").concat(theme['button-outline-content-color'], ";\n          }\n        }\n\n        &:active {\n          box-shadow: ").concat(theme['button-outline-active-border-color'], ";\n          color: ").concat(theme['button-outline-content-color'], ";\n          .aether-link-text {\n            border-bottom-width: ").concat(theme['border-width-default'], ";\n            border-bottom-style: ").concat(theme['border-style-solid'], ";\n            border-bottom-color: transparent;\n          }\n          svg path {\n            fill: ").concat(theme['button-outline-content-color'], ";\n          }\n        }\n      ");

    default:
      return "\n        color: inherit;\n        .aether-link-text {\n          border-bottom-width: ".concat(theme['border-width-default'], ";\n          border-bottom-style: ").concat(theme['border-style-solid'], ";\n          border-bottom-color: ").concat(theme['grey-40'], ";\n        }\n      ");
  }
}

var StyledTextLink = styled.span.withConfig({
  displayName: "TextLink__StyledTextLink",
  componentId: "sc-1cim3od-0"
})(["text-decoration:none;width:max-content;display:inline-flex;align-items:center;cursor:pointer;.aether-link-text{border-bottom:", ";}&:hover{color:", ";.aether-link-text{border-bottom:", ";}}&:focus{outline-color:", ";outline-offset:2px;}i{svg > path[fill]{fill:currentColor;}}", ";"], function (props) {
  return "".concat(props.theme['border-width-default'], " ").concat(props.theme['border-style-solid'], " transparent");
}, function (props) {
  return props.theme['content-color-link'];
}, function (props) {
  return "".concat(props.theme['border-width-default'], " ").concat(props.theme['border-style-solid'], " ").concat(props.theme['content-color-link']);
}, function (props) {
  return props.theme['blue-20'];
}, function (props) {
  return getTextLinkStyle(props.type, props.theme);
});

function TextLink(props) {
  var className = props.className,
      children = props.children,
      isExternal = props.isExternal,
      type = props.type;
  return /*#__PURE__*/React.createElement(StyledTextLink, {
    type: type,
    className: className
  }, /*#__PURE__*/React.createElement("span", {
    className: "aether-link-text"
  }, children), isExternal ? /*#__PURE__*/React.createElement(Icon, {
    name: "icon-action-openWeb-stroke",
    size: "large"
  }) : null);
}

export default TextLink;
TextLink.defaultProps = {
  className: '',
  isExternal: false,
  type: 'link-default'
};
TextLink.propTypes = {
  className: PropTypes.string,
  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]).isRequired,
  isExternal: PropTypes.bool,
  type: PropTypes.oneOf(TEXT_LINK_VARIANTS)
};