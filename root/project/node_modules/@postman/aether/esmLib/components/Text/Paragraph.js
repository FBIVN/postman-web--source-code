function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import React, { useState } from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';
import { aliases, globals } from '../../design-tokens/tokens';
import { isTextTruncatable, wrapWithTooltip } from '../../utils/common/index';
/**
 * @description This function generates style the paragraph variants i.e. para and lead
 * @param {string} type holds type of paragraph variant
 */

function getParagraphStyle(type, theme) {
  switch (type) {
    case 'lead':
      return "\n        font-size: ".concat(theme['text-size-l'], ";\n        ");

    default:
      return "\n        font-size: ".concat(theme['text-size-m'], ";\n        ");
  }
}
/**
 * Function to get truncation related styles for the typography components
 * @param {boolean} isTruncated - determines whether single line truncation is enabled
 * @param {number} maxLines - enables multi-line truncation
 * @returns a string of css styles.
 */


function getTextTruncationStyles(isTruncated, maxLines) {
  // single line truncation styles
  // also adding styles on top of truncation styles to prevent tooltip coming on truncated elements on Safari.
  var isTruncatedStyles = "\n      text-overflow: ellipsis;\n      overflow: hidden;\n      white-space: nowrap;\n\n      &::after {\n        content: '';\n        display: block;\n        width: 0;\n        height: 0;\n        line-height: 0;\n      }\n    "; // multi-line truncation styles

  var maxLinesStyles = "\n    display: -webkit-box;\n    -webkit-line-clamp: ".concat(maxLines, ";\n    -webkit-box-orient: vertical;  \n    overflow: hidden;\n    ");
  return "\n    ".concat(isTruncated ? isTruncatedStyles : '', "\n    ").concat(maxLines ? maxLinesStyles : '', "\n    ");
}
/**
 * Function to apply bottom margin to the Paragraph according to its type
 * @param {String} type - the type of paragraph ('para', 'lead')
 */


function getMarginStyles(type, theme) {
  switch (type) {
    case 'lead':
      return "\n      margin-bottom: ".concat(theme['spacing-xxl'], ";\n    ");

    default:
      return "\n      margin-bottom: ".concat(theme['spacing-m'], ";\n    ");
  }
}

var StyledParagraph = styled.p.withConfig({
  displayName: "Paragraph__StyledParagraph",
  componentId: "sc-ydq79l-0"
})(["margin:", ";color:", ";max-width:", ";", " overflow-wrap:break-word;word-wrap:break-word;word-break:break-word;", ";font-weight:", ";line-height:1.6;", ""], function (props) {
  return props.theme['spacing-zero'];
}, function (props) {
  return props.theme[props.color];
}, function (props) {
  return props.maxWidth;
}, function (props) {
  return getParagraphStyle(props.type, props.theme);
}, function (props) {
  return props.hasBottomSpacing && getMarginStyles(props.type, props.theme);
}, function (props) {
  return props.theme['text-weight-normal'];
}, function (props) {
  return getTextTruncationStyles(props.isTruncated, props.maxLines);
});

function Paragraph(props) {
  var className = props.className,
      children = props.children,
      color = props.color,
      type = props.type,
      hasBottomSpacing = props.hasBottomSpacing,
      isTruncated = props.isTruncated,
      maxLines = props.maxLines,
      maxWidth = props.maxWidth,
      tooltip = props.tooltip;

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      isTooltipVisible = _useState2[0],
      setTooltipVisible = _useState2[1];
  /**
   * Function to detect if the text content is truncated when the text is hovered to show a tooltip
   * @param {object} e - the event object for onMouseEnter listener
   */


  function handleTooltipVisible(e) {
    if (e.target && e.target.scrollWidth > e.target.offsetWidth) {
      setTooltipVisible(true);
    } else {
      setTooltipVisible(false);
    }
  }

  var jsx = /*#__PURE__*/React.createElement(StyledParagraph, {
    className: className,
    type: type,
    hasBottomSpacing: hasBottomSpacing,
    color: color,
    isTruncated: isTruncated,
    maxLines: maxLines,
    maxWidth: maxWidth,
    onMouseEnter: handleTooltipVisible
  }, children);
  return isTextTruncatable(props) && isTooltipVisible ? wrapWithTooltip(jsx, tooltip || children) : jsx;
}

export default Paragraph;
Paragraph.defaultProps = {
  className: '',
  type: 'para',
  hasBottomSpacing: false,
  color: 'content-color-secondary',
  isTruncated: false,
  maxLines: undefined,
  tooltip: ''
};
Paragraph.propTypes = {
  className: PropTypes.string,
  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]).isRequired,
  type: PropTypes.oneOf(['para', 'lead']),
  hasBottomSpacing: PropTypes.bool,
  color: PropTypes.oneOf([''].concat(_toConsumableArray(Object.keys(globals.colors)), _toConsumableArray(Object.keys(aliases.light.content)))),
  isTruncated: PropTypes.bool,
  maxLines: PropTypes.number,
  maxWidth: PropTypes.string.isRequired,
  tooltip: PropTypes.string
};