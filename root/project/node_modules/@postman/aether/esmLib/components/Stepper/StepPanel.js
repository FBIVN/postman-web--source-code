import React from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';
import Heading from '../Heading/Heading';
import Button from '../Button/Button';
import Text from '../Text/Text';
import Flex from '../Flex/Flex';
var StyledStepPanelElement = styled.div.withConfig({
  displayName: "StepPanel__StyledStepPanelElement",
  componentId: "sc-1k49dlf-0"
})(["display:", ";color:", ";"], function (props) {
  var _isActive = props._isActive;
  return _isActive ? 'block' : 'none';
}, function (props) {
  return props.theme['content-color-primary'];
});
export default function StepPanel(props) {
  var _isActive = props._isActive,
      _index = props._index,
      heading = props.heading,
      description = props.description,
      primaryAction = props.primaryAction,
      secondaryAction = props.secondaryAction,
      className = props.className,
      children = props.children;

  var renderPrimaryAction = function renderPrimaryAction(primaryActionComp) {
    if (primaryActionComp && primaryActionComp.type === Button) {
      var ButtonType = primaryActionComp.props && primaryActionComp.props.type;
      if (ButtonType === 'primary') return primaryActionComp;
    }

    return null;
  };

  var renderSecondaryAction = function renderSecondaryAction(secondaryActionComp) {
    if (secondaryActionComp && secondaryActionComp.type === Button) {
      var ButtonType = secondaryActionComp.props && secondaryActionComp.props.type;
      if (ButtonType === 'secondary') return secondaryActionComp;
    }

    return null;
  };

  return /*#__PURE__*/React.createElement(StyledStepPanelElement, {
    _isActive: _isActive,
    className: className,
    key: "STEP_CONTENT ".concat(_index)
  }, /*#__PURE__*/React.createElement(Flex, {
    direction: "column",
    gap: "spacing-xxl"
  }, /*#__PURE__*/React.createElement(Flex, {
    direction: "column",
    gap: "spacing-l"
  }, heading || description ? /*#__PURE__*/React.createElement(Flex, {
    direction: "column",
    gap: "spacing-s"
  }, heading ? /*#__PURE__*/React.createElement(Heading, {
    type: "h3",
    text: heading
  }) : '', description ? /*#__PURE__*/React.createElement(Text, {
    type: "para"
  }, description) : '') : '', children), /*#__PURE__*/React.createElement(Flex, {
    gap: "spacing-s",
    grow: 1,
    shrink: 1,
    justifyContent: "flex-end"
  }, renderSecondaryAction(secondaryAction), renderPrimaryAction(primaryAction))));
}
StepPanel.defaultProps = {
  _isActive: false,
  heading: '',
  description: '',
  primaryAction: null,
  secondaryAction: null,
  className: '',
  _index: null
};
StepPanel.propTypes = {
  _isActive: PropTypes.bool,
  _index: PropTypes.number,
  heading: PropTypes.string,
  description: PropTypes.string,
  primaryAction: function primaryAction(props) {
    var primaryAction = props.primaryAction;

    if (primaryAction) {
      if (primaryAction.type !== Button) return new Error('StepPanel: primaryAction prop only accepts Aether button component.');
      var ButtonType = primaryAction.props && primaryAction.props.type;
      if (ButtonType !== 'primary') return new Error('StepPanel: primaryAction prop only accepts button type primary.');
    }

    return null;
  },
  secondaryAction: function secondaryAction(props) {
    var secondaryAction = props.secondaryAction;

    if (secondaryAction) {
      if (secondaryAction.type !== Button) return new Error('StepPanel: secondaryAction prop only accepts Aether button component.');
      var ButtonType = secondaryAction.props && secondaryAction.props.type;
      if (ButtonType !== 'secondary') return new Error('StepPanel: secondaryAction prop only accepts button type secondary.');
    }

    return null;
  },
  className: PropTypes.string,
  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]).isRequired
};