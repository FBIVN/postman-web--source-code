import React, { Children, isValidElement, cloneElement } from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';
import Step from './Step';
import Flex from '../Flex/Flex';
var StyledProgressLine = styled.div.withConfig({
  displayName: "StepHeader__StyledProgressLine",
  componentId: "sc-unl4g2-0"
})(["position:relative;width:100%;height:2px;background-color:", ";&:after{content:'';position:absolute;top:0;bottom:0;left:0;right:0;height:2px;width:", ";max-width:100%;background-color:", ";}"], function (props) {
  return props.theme['border-color-strong'];
}, function (props) {
  return "".concat((props.activeStepIndex + 1) / props.totalSteps * 100, "%");
}, function (props) {
  return props.theme['stepper-progress-line-background-color'];
});
export default function StepHeader(props) {
  var counter = 0;
  var _activeStepIndex = props._activeStepIndex,
      _onChange = props._onChange,
      className = props.className,
      children = props.children; // children are only Step type

  var validChildren = Children.map(children, function (child) {
    var stepElement = child; // Checking isValidElement or not

    if ( /*#__PURE__*/isValidElement(child) && [Step].includes(child.type)) {
      stepElement = /*#__PURE__*/cloneElement(child, {
        _isActive: counter === _activeStepIndex,
        _stepIndex: counter,
        _onChange: _onChange
      });
      counter += 1;
      return stepElement;
    }

    return null;
  });
  return /*#__PURE__*/React.createElement(Flex, {
    gap: "spacing-s",
    className: className,
    direction: "column"
  }, /*#__PURE__*/React.createElement(StyledProgressLine, {
    activeStepIndex: _activeStepIndex,
    totalSteps: validChildren.length
  }), /*#__PURE__*/React.createElement(Flex, null, validChildren));
}
StepHeader.defaultProps = {
  className: '',
  _activeStepIndex: 0,
  _onChange: null
};
StepHeader.propTypes = {
  _activeStepIndex: PropTypes.number,
  _onChange: PropTypes.func,
  className: PropTypes.string,
  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]).isRequired
};