import React from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';
import Icon from '../Icon/Icon';
import Tooltip from '../Tooltip/Tooltip';
/**
 * @description calculates styles for Label based on type and size
 * @param {string} type holds the type of the Label
 * @param {string} size holds the size of the Label
 * @param {string} isDisabled holds the disable state
 */

function getTextStyle(type, size, isDisabled, theme) {
  var color = theme['content-color-secondary'];

  if (isDisabled) {
    color = theme['content-color-tertiary'];
  }

  if (type === 'optionSelector') {
    color = isDisabled ? theme['content-color-secondary'] : theme['content-color-primary'];
  }

  var fontFamily = theme['text-family-default'];
  var fontWeight = type === 'primary' ? theme['text-weight-medium'] : theme['text-weight-regular'];
  var fontSize = theme['text-size-m'];
  var lineHeight = theme['line-height-s'];

  if (size === 'large') {
    lineHeight = theme['line-height-m'];
  }

  if (size === 'large') fontSize = theme['text-size-l'];
  if (size === 'small') fontSize = theme['text-size-s'];
  return "\n    color: ".concat(color, ";\n    font-family: ").concat(fontFamily, ";\n    font-weight: ").concat(fontWeight, ";\n    font-size: ").concat(fontSize, ";\n    line-height: ").concat(lineHeight, ";\n  ");
}
/**
 * @description Returns required or optional view based on fieldType
 * @param {string} fieldType holds types for the Label
 */


function getFieldText(fieldType) {
  if (fieldType === 'required') return /*#__PURE__*/React.createElement(StyledFieldTypeElement, null, "(required)");
  if (fieldType === 'optional') return /*#__PURE__*/React.createElement(StyledFieldTypeElement, null, "(optional)");
  return '';
}

var StyledFieldTypeElement = styled.span.withConfig({
  displayName: "Label__StyledFieldTypeElement",
  componentId: "sc-1kphgse-0"
})(["color:", ";font-family:", ";font-weight:", ";font-size:", ";line-height:", ";margin-left:", ";"], function (props) {
  return props.theme['content-color-secondary'];
}, function (props) {
  return props.theme['text-family-default'];
}, function (props) {
  return props.theme['text-weight-regular'];
}, function (props) {
  return props.theme['text-size-s'];
}, function (props) {
  return props.theme['line-height-xs'];
}, function (props) {
  return props.theme['spacing-xs'];
});
var LabelElement = styled.label.attrs(function (props) {
  return {
    htmlFor: props.htmlFor
  };
}).withConfig({
  displayName: "Label__LabelElement",
  componentId: "sc-1kphgse-1"
})(["align-items:center;display:flex;", " ", " i{margin-left:", ";:hover{svg{path{fill:", ";}}}}"], function (props) {
  return getTextStyle(props.type, props.size, props.isDisabled, props.theme);
}, function (props) {
  return props.isHidden ? "\n      clip: rect(0 0 0 0);\n      height: 1px;\n      overflow: hidden;\n      position: absolute;\n      white-space: nowrap;\n      width: 1px;\n    " : '';
}, function (props) {
  return props.theme['spacing-xs'];
}, function (props) {
  return props.theme['content-color-primary'];
});
var StyledInfoIconWrapper = styled.span.withConfig({
  displayName: "Label__StyledInfoIconWrapper",
  componentId: "sc-1kphgse-2"
})(["display:flex;align-items:center;"]);
export default function Label(props) {
  var children = props.children,
      fieldType = props.fieldType,
      htmlFor = props.htmlFor,
      infoText = props.infoText,
      size = props.size,
      text = props.text,
      type = props.type,
      isDisabled = props.isDisabled,
      isHidden = props.isHidden;
  return /*#__PURE__*/React.createElement(LabelElement, {
    htmlFor: htmlFor,
    type: type,
    size: size,
    isDisabled: isDisabled,
    isHidden: isHidden
  }, text.length ? text : children, fieldType ? getFieldText(fieldType) : '', infoText ? /*#__PURE__*/React.createElement(Tooltip, {
    content: infoText,
    placement: "top-end"
  }, /*#__PURE__*/React.createElement(StyledInfoIconWrapper, null, /*#__PURE__*/React.createElement(Icon, {
    name: "icon-state-info-stroke",
    size: size === 'large' ? 'large' : 'small'
  }))) : '');
}
Label.defaultProps = {
  children: null,
  text: '',
  fieldType: '',
  htmlFor: '',
  size: 'medium',
  type: 'primary',
  isDisabled: false,
  isHidden: false,
  infoText: ''
};
Label.propTypes = {
  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]),
  // optionSelector is used internally only for Radio, Checkbox and toggle labels
  type: PropTypes.oneOf(['primary', 'secondary', 'optionSelector']),
  text: PropTypes.string,
  fieldType: PropTypes.oneOf(['required', 'optional', '']),
  htmlFor: PropTypes.string,
  infoText: PropTypes.string,
  size: PropTypes.oneOf(['large', 'medium', 'small']),
  isDisabled: PropTypes.bool,
  isHidden: PropTypes.bool
};