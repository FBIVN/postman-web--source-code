import React from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';
/**
 * @description Specifies badge styles
 * @param {string} status holds current badge status
 * @param {object} theme holds the theme object
 * @returns badge background and content styles
 */

function getBadgeStyle(status, theme) {
  switch (status) {
    case 'success':
      return "\n        background-color: ".concat(theme['background-color-success'], ";\n        color: ").concat(theme['content-color-success'], ";\n      ");

    case 'info':
      return "\n        background-color: ".concat(theme['background-color-info'], ";\n        color: ").concat(theme['content-color-info'], ";\n      ");

    case 'warning':
      return "\n        background-color: ".concat(theme['background-color-warning'], ";\n        color: ").concat(theme['content-color-warning'], ";\n      ");

    case 'critical':
      return "\n        background-color: ".concat(theme['background-color-error'], ";\n        color: ").concat(theme['content-color-error'], ";\n      ");

    case 'count':
      return "\n        background-color: ".concat(theme['badge-status-count-background-color'], ";\n        color: ").concat(theme['content-color-constant'], ";\n      ");

    case 'new':
      return "\n        background-color: ".concat(theme['badge-status-new-background-color'], ";\n        color: ").concat(theme['badge-status-new-content-color'], ";\n      ");

    default:
      {
        return "\n        background-color: ".concat(theme['background-color-tertiary'], ";\n        color: ").concat(theme['content-color-secondary'], ";\n      ");
      }
  }
}

var StyledBadge = styled.span.withConfig({
  displayName: "Badge__StyledBadge",
  componentId: "sc-66ozun-0"
})(["", " border-radius:", ";font-size:", ";font-weight:", ";height:", ";line-height:", ";margin-left:", ";margin-right:", ";padding:", " ", ";text-transform:uppercase;box-sizing:border-box;width:max-content;display:inline-flex;align-items:center;justify-content:center;"], function (props) {
  return getBadgeStyle(props.status, props.theme);
}, function (props) {
  return props.theme['badge-border-radius'];
}, function (props) {
  return props.theme['text-size-s'];
}, function (props) {
  return props.theme['text-weight-medium'];
}, function (props) {
  return props.theme['size-xs'];
}, function (props) {
  return props.theme['line-height-s'];
}, function (props) {
  return props.theme['spacing-xs'];
}, function (props) {
  return props.theme['spacing-xs'];
}, function (props) {
  return props.theme['spacing-zero'];
}, function (props) {
  return props.theme['spacing-s'];
});
var Badge = /*#__PURE__*/React.forwardRef(function Badge(props, ref) {
  var status = props.status,
      text = props.text,
      onClick = props.onClick,
      onMouseEnter = props.onMouseEnter,
      onMouseLeave = props.onMouseLeave,
      className = props.className;
  return /*#__PURE__*/React.createElement(StyledBadge, {
    status: status,
    ref: ref,
    onClick: onClick,
    onMouseEnter: onMouseEnter,
    onMouseLeave: onMouseLeave,
    className: className
  }, text);
});
Badge.displayName = 'Badge';
export default Badge;
Badge.defaultProps = {
  status: 'neutral',
  onClick: null,
  onMouseEnter: null,
  onMouseLeave: null,
  className: ''
};
Badge.propTypes = {
  status: PropTypes.oneOf(['neutral', 'success', 'info', 'warning', 'critical', 'count', 'new']),
  text: PropTypes.string.isRequired,
  onClick: PropTypes.func,
  onMouseEnter: PropTypes.func,
  onMouseLeave: PropTypes.func,
  className: PropTypes.string
};