import React from 'react';
import styled from 'styled-components';
import propTypes from 'prop-types';
import MenuItem from './MenuItem';
import MenuItemGroup from './MenuItemGroup';
import { POPOVER_PLACEMENT_POSITIONS } from '../Popover/Popover';
import LazyPopover from '../Popover/LazyPopover';
var StyledMenuListWrapper = styled.div.withConfig({
  displayName: "MenuList__StyledMenuListWrapper",
  componentId: "sc-1ungm9e-0"
})(["min-width:200px;padding:", ";& .aether-menu__item-group:first-child{margin-top:", ";}& .aether-menu__item-group:not(:last-child){margin-bottom:", ";}"], function (props) {
  return "".concat(props.theme['spacing-s'], " ").concat(props.theme['spacing-xs'], ";");
}, function (props) {
  return props.theme['spacing-xs'];
}, function (props) {
  return props.theme['spacing-m'];
});

function MenuList(props) {
  var children = props.children,
      isMenuOpen = props.isMenuOpen,
      triggerRef = props.triggerRef,
      placement = props.placement,
      closeOnSelect = props.closeOnSelect,
      closeMenu = props.closeMenu;

  var handleClickOutside = function handleClickOutside() {
    closeMenu();
  };

  var clonedChildren = React.Children.map(children, function (child) {
    if ( /*#__PURE__*/React.isValidElement(child) && (child.type === MenuItem || child.type === MenuItemGroup)) {
      return /*#__PURE__*/React.cloneElement(child, {
        closeOnSelect: closeOnSelect,
        closeMenu: closeMenu
      });
    }

    return child;
  });
  return /*#__PURE__*/React.createElement(LazyPopover, {
    isOpen: isMenuOpen,
    padding: "spacing-zero",
    placement: placement,
    triggerRef: triggerRef,
    onClickOutside: handleClickOutside
  }, /*#__PURE__*/React.createElement(StyledMenuListWrapper, null, clonedChildren));
}

MenuList.displayName = 'MenuList';
export default MenuList;
MenuList.defaultProps = {
  triggerRef: null,
  placement: 'bottom-start',
  isMenuOpen: false,
  closeOnSelect: true,
  closeMenu: null
};
MenuList.propTypes = {
  children: propTypes.node.isRequired,
  isMenuOpen: propTypes.bool,
  closeOnSelect: propTypes.bool,
  closeMenu: propTypes.func,
  triggerRef: propTypes.object,
  placement: propTypes.oneOf(POPOVER_PLACEMENT_POSITIONS)
};