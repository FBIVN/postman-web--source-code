var _excluded = ["children", "handleToggleMenu"];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import styled from 'styled-components';
import propTypes from 'prop-types';
import Button from '../Button/Button';
var StyledMenuButton = styled(Button).withConfig({
  displayName: "MenuButton__StyledMenuButton",
  componentId: "sc-1pxf512-0"
})(["min-width:max-content;"]);
var StyledCustomButton = styled.div.withConfig({
  displayName: "MenuButton__StyledCustomButton",
  componentId: "sc-1pxf512-1"
})(["display:inline-block;"]);
var MenuButton = /*#__PURE__*/React.forwardRef(function MenuButton(props, ref) {
  var children = props.children,
      handleToggleMenu = props.handleToggleMenu,
      restOfTheProps = _objectWithoutProperties(props, _excluded);

  var isCustomButtonProvided = Boolean(children);

  var handleOnClick = function handleOnClick() {
    if (handleToggleMenu) {
      handleToggleMenu();
    }
  };

  var clonedCustomButton = isCustomButtonProvided && React.Children.map(children, function (child) {
    if ( /*#__PURE__*/React.isValidElement(child) && child.type === Button) {
      return /*#__PURE__*/React.cloneElement(child, {
        onClick: handleOnClick
      });
    }

    return null;
  });
  return isCustomButtonProvided ? /*#__PURE__*/React.createElement(StyledCustomButton, {
    ref: ref
  }, clonedCustomButton) : /*#__PURE__*/React.createElement(StyledMenuButton // eslint-disable-next-line react/jsx-props-no-spreading
  , _extends({}, restOfTheProps, {
    onClick: handleOnClick,
    rightIcon: "icon-direction-down",
    ref: ref
  }));
});
MenuButton.displayName = 'MenuButton';
export default MenuButton;
MenuButton.defaultProps = {
  type: 'secondary',
  children: null,
  handleToggleMenu: null
};
MenuButton.propTypes = {
  handleToggleMenu: propTypes.func,
  type: propTypes.oneOf(['tertiary', 'secondary']),
  children: function children(props) {
    var children = props.children;

    if (children) {
      if (!children.type === Button) return new Error("MenuButton: MenuButton component only accepts Aether's Button component as valid children value.");
    }

    return null;
  }
};