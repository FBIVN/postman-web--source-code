function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

import React from 'react';
import styled from 'styled-components';
import PropTypes from 'prop-types';
import { aliases, globals } from '../../design-tokens/tokens';
/* Mixin function to get the icon size variant based on the size of the button */

function getIconSizeStyles(size) {
  if (size === 'large') {
    return "\n        width: 16px;\n        height: 16px;\n      ";
  }

  if (size === 'small') {
    return "\n        width: 12px;\n        height: 12px;\n      ";
  }

  return '';
}
/* Mixin function for providing color to icons */


function setIconColor(color, theme) {
  if (!color) return null;
  return "\n      svg {\n        path {\n          fill: ".concat(theme[color], ";\n        }\n      }\n    ");
}

var IconContainer = styled.i.withConfig({
  displayName: "IconWrapper__IconContainer",
  componentId: "sc-r96cto-0"
})(["display:inline-flex;", " ", " svg{", "}"], function (props) {
  return getIconSizeStyles(props.size);
}, function (props) {
  return setIconColor(props.color, props.theme);
}, function (props) {
  return getIconSizeStyles(props.size);
});
var IconWrapper = /*#__PURE__*/React.forwardRef(function IconWrapper(props, ref) {
  var color = props.color,
      size = props.size,
      title = props.title,
      className = props.className,
      svg = props.svg;
  return /*#__PURE__*/React.createElement(IconContainer, {
    size: size,
    color: color,
    className: className,
    title: title,
    ref: ref
  }, svg);
});
IconWrapper.displayName = 'IconWrapper';
IconWrapper.defaultProps = {
  size: undefined,
  color: undefined,
  className: '',
  title: '',
  svg: null
};
IconWrapper.propTypes = {
  size: PropTypes.oneOf(['small', 'large']),
  color: PropTypes.oneOf([undefined].concat(_toConsumableArray(Object.keys(globals.colors)), _toConsumableArray(Object.keys(aliases.light.colors)), _toConsumableArray(Object.keys(aliases.light.content)), ['header-color-content'])),
  className: PropTypes.string,
  title: PropTypes.string,
  svg: PropTypes.node
};
export default IconWrapper;