function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

import React from 'react';
import PropTypes from 'prop-types';
import Icons from '../../design-tokens/Icons';
import { globals, aliases } from '../../design-tokens/tokens';
var DIRECTION_ICONS = ['icon-direction-up', 'icon-direction-down', 'icon-direction-left', 'icon-direction-right', 'icon-direction-up-large', 'icon-direction-down-large', 'icon-direction-left-large', 'icon-direction-right-large'];
/**
 * Function to return the icon size variant
 * If a smaller size variant present then it is returned
 * else the larger variant is returned with the required width/height css
 * @param {String} name - the name of the icon provided as a prop
 * @param {String} size - the size of the icon provided as a prop
 */

function getIconSizeVariant(name, size) {
  // Added this condition to check if existing icons are to be used or the larger variant
  // It checks if the user is requesting for the larger variants or not
  // since this can lead to the older direction icons also rendering the larger direction icons.
  // This function is not going to be used once we deprecate the size prop.
  if (DIRECTION_ICONS.includes(name)) {
    return Icons[name];
  }

  if (Icons["".concat(name, "-").concat(size)]) {
    return Icons["".concat(name, "-").concat(size)];
  }

  return Icons[name];
}

var Icon = /*#__PURE__*/React.forwardRef(function Icon(props, ref) {
  var name = props.name,
      size = props.size,
      color = props.color,
      className = props.className,
      title = props.title;

  if (!Object.keys(Icons).includes(name)) {
    // render nothing if name prop is invalid
    return null;
  }

  return /*#__PURE__*/React.cloneElement(getIconSizeVariant(name, size), {
    name: name,
    size: size,
    color: color,
    className: className,
    title: title,
    ref: ref
  });
});
Icon.displayName = 'Icon';
export default Icon;
Icon.defaultProps = {
  size: 'large',
  color: undefined,
  className: '',
  title: ''
};
Icon.propTypes = {
  name: PropTypes.oneOf(Object.keys(Icons)).isRequired,
  size: PropTypes.oneOf(['small', 'large']),
  color: PropTypes.oneOf([undefined].concat(_toConsumableArray(Object.keys(globals.colors)), _toConsumableArray(Object.keys(aliases.light.colors)), _toConsumableArray(Object.keys(aliases.light.content)), ['header-color-content'])),
  className: PropTypes.string,
  title: PropTypes.string
};