function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

import React from 'react';
import styled from 'styled-components';
import PropTypes from 'prop-types';
import Icon from '../Icon/Icon';
/**
 * @description This function defines the dimension of Avatar based on Size prop
 * @param {string} size holds size variants for Avatar
 * @param {boolean} isOrg specifies whether it represents avatar of an organization
 * @returns returns height and width for Avatar
 */

function getAvatarSize(size, isOrg) {
  switch (size) {
    case 'xs':
      return " height: 16px; width: 16px;";

    case 's':
      return " height: 24px; width: 24px;";

    case 'm':
      return " height: 32px; width: 32px;";

    case 'l':
      return " height: 48px; width: 48px;";

    case 'xl':
      return "height: 64px; width: 64px;";

    case 'xxl':
      if (isOrg) return "height: 216px; width: 216px;";
      return "height: 120px; width: 120px;";

    default:
      return " height: 32px; width: 32px;";
  }
}

function getAvatarPadding(theme, size, isOrg) {
  if (isOrg) return size === 'xxl' ? theme['spacing-xxxl'] : theme['spacing-xs'];
  return theme['spacing-zero'];
}
/**
 * @description Returns visual for avatar based on provided values
 * @param {string} type holds type variant value for avatar
 * @param {string} src In case of image to be rendered, src holds resource url
 * @param {number} value In case of type count, value holds the numeric count
 * @param {string} size holds size variants for Avatar
 * @param {boolean} isOrg defines whether the avatar is to represent org
 * @param {string} alt holds alt value for an image
 * @returns visual for avatar based on provided values
 */


function getAvatarContent(type, src, value, size, isOrg, alt) {
  // in case src is provided always render the image
  if (src) return /*#__PURE__*/React.createElement(StyledAvatarImg, {
    src: src,
    size: size,
    isOrg: isOrg,
    alt: alt
  }); // in case src is not provided and type team, render team icon

  if (type === 'team') return /*#__PURE__*/React.createElement(Icon, {
    name: "icon-descriptive-team-stroke-small",
    size: "small"
  }); // in case src is not provided and type count, render numeric count.

  if (type === 'count') {
    // for values more than 2 digit, we are representing it as 99+.
    if (value > 99) {
      return "99+";
    }

    return "+".concat(value);
  } // in case src is not provided and type user, render user icon


  return /*#__PURE__*/React.createElement(Icon, {
    name: "icon-descriptive-user-stroke-small",
    size: "small"
  });
}

var StyledAvatar = styled.span.withConfig({
  displayName: "Avatar__StyledAvatar",
  componentId: "sc-1i60ckh-0"
})(["", " display:flex;justify-content:center;align-items:center;border-radius:", ";font-size:", ";font-weight:", ";line-height:", ";color:", ";letter-spacing:-0.5px;background-color:", ";:hover{background-color:", ";}cursor:pointer;user-select:none;padding:", ";box-sizing:border-box;"], function (props) {
  return getAvatarSize(props.size, props.isOrg);
}, function (props) {
  return props.isOrg ? props.theme['border-radius-default'] : props.theme['border-radius-max'];
}, function (props) {
  return props.theme['text-size-s'];
}, function (props) {
  return props.theme['text-weight-medium'];
}, function (props) {
  return props.theme['line-height-s'];
}, function (props) {
  return props.theme['content-color-constant'];
}, function (props) {
  return props.type === 'count' ? props.theme['avatar-type-count-background-color'] : props.theme['background-color-tertiary'];
}, function (props) {
  return props.type === 'count' ? props.theme['avatar-type-count-hovered-background-color'] : props.theme['background-color-tertiary'];
}, function (props) {
  return getAvatarPadding(props.theme, props.size, props.isOrg);
});
var StyledAvatarImg = styled.img.attrs(function (props) {
  return {
    src: props.src
  };
}).withConfig({
  displayName: "Avatar__StyledAvatarImg",
  componentId: "sc-1i60ckh-1"
})(["overflow:hidden;border-radius:", ";height:100%;width:100%;object-fit:contain;"], function (props) {
  return props.isOrg ? 0 : props.theme['border-radius-max'];
});
var Avatar = /*#__PURE__*/React.forwardRef(function Avatar(props, ref) {
  var size = props.size,
      src = props.src,
      type = props.type,
      value = props.value,
      isOrg = props.isOrg,
      alt = props.alt,
      className = props.className,
      onClick = props.onClick;
  return /*#__PURE__*/React.createElement(StyledAvatar, {
    size: size,
    type: type,
    ref: ref,
    isOrg: isOrg,
    className: className,
    onClick: onClick
  }, getAvatarContent(type, src, value, size, isOrg, alt));
});
Avatar.displayName = 'Avatar';
export default Avatar;
Avatar.defaultProps = {
  size: 'm',
  src: '',
  type: 'user',
  value: 0,
  isOrg: false,
  alt: '',
  className: '',
  onClick: null
};
Avatar.propTypes = {
  size: PropTypes.oneOf(['xs', 's', 'm', 'l', 'xl', 'xxl']),
  src: function src(props) {
    var alt = props.alt,
        src = props.src,
        value = props.value;

    if (typeof src !== 'string') {
      throw new Error("Avatar: Invalid prop 'src' of type ".concat(_typeof(src), " is provided, should be of type string."));
    }

    if (alt && !src) {
      throw new Error("Avatar: alt prop shall be provided when an image url is provided in src prop.");
    }

    if (value && src) {
      // eslint-disable-next-line no-console
      console.warn("Avatar: value prop does not work if an image url is provided in src prop.");
    }

    return null;
  },
  type: PropTypes.oneOf(['user', 'team', 'count']),
  value: PropTypes.number,
  isOrg: function isOrg(props) {
    var src = props.src,
        isOrg = props.isOrg;

    if (typeof isOrg !== 'boolean') {
      throw new Error("Avatar: Invalid prop 'isOrg' of type ".concat(_typeof(isOrg), " is provided, should be of type boolean."));
    }

    if (isOrg && !src) {
      throw new Error("Avatar: An image url shall be provided in src prop when isOrg is set true.");
    }

    return null;
  },
  alt: PropTypes.string,
  className: PropTypes.string,
  onClick: PropTypes.func
};