function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import React, { useState } from 'react';
import styled from 'styled-components';
import PropTypes from 'prop-types';
import Tippy from '@tippyjs/react';
import { globals } from '../../design-tokens/tokens';
export var POPOVER_PLACEMENT_POSITIONS = ['auto', 'top', 'top-start', 'top-end', 'bottom', 'bottom-start', 'bottom-end', 'left', 'left-start', 'left-end', 'right', 'right-start', 'right-end'];
export var StyledPopover = styled(Tippy).withConfig({
  displayName: "Popover__StyledPopover",
  componentId: "sc-1pbjhyx-0"
})(["& .tippy-content{min-width:120px;z-index:1000;background-color:", ";border-radius:", ";padding:", ";box-shadow:", ";font-family:", ";font-size:", ";line-height:", ";font-weight:", ";}"], function (props) {
  return props.theme['popover-background-color'];
}, function (props) {
  return props.theme['border-radius-default'];
}, function (props) {
  return props.theme[props.padding];
}, function (props) {
  return props.theme['popover-box-shadow'];
}, function (props) {
  return props.theme['text-family-default'];
}, function (props) {
  return props.theme['text-size-m'];
}, function (props) {
  return props.theme['line-height-m'];
}, function (props) {
  return props.theme['text-weight-regular'];
});
export default function Popover(props) {
  var _useState = useState({}),
      _useState2 = _slicedToArray(_useState, 2),
      popoverInstance = _useState2[0],
      setPopoverInstance = _useState2[1];

  var children = props.children,
      placement = props.placement,
      delay = props.delay,
      trigger = props.trigger,
      padding = props.padding,
      isOpen = props.isOpen,
      onClickOutside = props.onClickOutside,
      className = props.className,
      triggerRef = props.triggerRef;

  function onKeyDown(event) {
    // Hide the popover on pressing Escape key.
    if (event.keyCode === 27) {
      // eslint-disable-next-line no-unused-expressions, no-underscore-dangle
      popoverInstance && popoverInstance.hide();
    }
  }

  function handleOnShow() {
    document.addEventListener('keydown', onKeyDown);
  }

  function handleOnHide() {
    document.removeEventListener('keydown', onKeyDown);
  }

  function handleClickOutside() {
    if (onClickOutside) onClickOutside();
  } // If isOpen is true/false then it means the user wants to control
  // the visibility of the Popover


  if (isOpen !== null) {
    return /*#__PURE__*/React.createElement(StyledPopover, {
      visible: isOpen,
      onCreate: function onCreate(instance) {
        return setPopoverInstance(instance);
      },
      content: children,
      placement: placement,
      interactive: true,
      delay: [delay, null],
      maxWidth: 300,
      className: "aether-popover ".concat(className),
      arrow: false,
      appendTo: document.getElementById('aether-popover-portal'),
      reference: triggerRef,
      onShow: handleOnShow,
      onHide: handleOnHide,
      padding: padding,
      offset: [0, 4],
      onClickOutside: handleClickOutside
    }, trigger);
  }

  return /*#__PURE__*/React.createElement(StyledPopover, {
    onCreate: function onCreate(instance) {
      return setPopoverInstance(instance);
    },
    content: children,
    placement: placement,
    trigger: "click",
    interactive: true,
    delay: [delay, null],
    maxWidth: 300,
    className: "aether-popover ".concat(className),
    arrow: false,
    appendTo: document.getElementById('aether-popover-portal'),
    reference: triggerRef,
    onShow: handleOnShow,
    onHide: handleOnHide,
    padding: padding,
    offset: [0, 4],
    onClickOutside: handleClickOutside
  }, trigger);
}
Popover.defaultProps = {
  trigger: null,
  triggerRef: null,
  placement: 'bottom-end',
  isOpen: null,
  children: null,
  padding: 'spacing-s',
  delay: 0,
  onClickOutside: null,
  className: ''
};
Popover.propTypes = {
  trigger: PropTypes.object,
  triggerRef: PropTypes.object,
  isOpen: PropTypes.bool,
  padding: PropTypes.oneOf(Object.keys(globals.spacing)),
  placement: PropTypes.oneOf(POPOVER_PLACEMENT_POSITIONS),
  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]),
  delay: PropTypes.number,
  onClickOutside: PropTypes.func,
  className: PropTypes.string
};