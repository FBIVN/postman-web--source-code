function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import React, { useState, useEffect } from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';
import Button from '../Button/Button';
import { BUTTON_SIZES } from '../constants';
var StyledButtonGroup = styled.div.withConfig({
  displayName: "ButtonGroup__StyledButtonGroup",
  componentId: "sc-2798hw-0"
})(["display:flex;& .button-group__buttons:not(:last-child){margin-right:", ";}"], function (props) {
  return props.theme[props.gap];
}); // This function populates the gap between buttons
// Based on the type of the buttons available.

function populateGap(children) {
  var checkIfAllButtonsArePrimary = React.Children.toArray(children).every(function (child) {
    return child.props.type === 'primary';
  });

  if (checkIfAllButtonsArePrimary) {
    // eslint-disable-next-line no-console
    console.warn('Invalid children component passed to ButtonGroup component, there should be maximum only one primary button component');
    return 'spacing-s';
  }

  var checkIfAllButtonsAreSecondary = React.Children.toArray(children).every(function (child) {
    return child.props.type === 'secondary';
  });

  if (checkIfAllButtonsAreSecondary) {
    return 'spacing-s';
  }

  var checkIfAllButtonsAreTertiary = React.Children.toArray(children).every(function (child) {
    return child.props.type === 'tertiary';
  });

  if (checkIfAllButtonsAreTertiary) {
    return 'spacing-zero';
  }

  return 'spacing-m';
}

export default function ButtonGroup(props) {
  var children = props.children,
      className = props.className,
      size = props.size;

  var _useState = useState('spacing-m'),
      _useState2 = _slicedToArray(_useState, 2),
      gap = _useState2[0],
      setGap = _useState2[1];

  useEffect(function () {
    setGap(populateGap(children));
  }, [children]);
  var clonedChildren = React.Children.map(children, function (child) {
    if ( /*#__PURE__*/React.isValidElement(child) && child.type === Button) {
      return /*#__PURE__*/React.cloneElement(child, {
        size: size,
        className: 'button-group__buttons'
      });
    }

    return null;
  });
  return /*#__PURE__*/React.createElement(StyledButtonGroup, {
    gap: gap,
    className: className
  }, clonedChildren);
}
ButtonGroup.defaultProps = {
  className: '',
  size: 'medium'
};
ButtonGroup.propTypes = {
  size: PropTypes.oneOf(BUTTON_SIZES),
  className: PropTypes.string,
  children: PropTypes.arrayOf(PropTypes.shape({
    type: PropTypes.oneOf([Button])
  })).isRequired
};