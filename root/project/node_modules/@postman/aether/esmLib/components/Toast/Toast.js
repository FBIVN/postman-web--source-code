import React from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';
import Flex from '../Flex/Flex';
import Icon from '../Icon/Icon';
import Heading from '../Heading/Heading';
import Text from '../Text/Text';
import Button from '../Button/Button'; // define toast styles based on status

function getToastStyle(status) {
  switch (status) {
    case 'info':
      return {
        iconName: 'icon-state-info-stroke',
        iconColor: 'content-color-info',
        toastBorderColor: 'base-color-info'
      };

    case 'success':
      return {
        iconName: 'icon-state-success-stroke',
        iconColor: 'content-color-success',
        toastBorderColor: 'base-color-success'
      };

    case 'warning':
      return {
        iconName: 'icon-state-warning-stroke',
        iconColor: 'content-color-warning',
        toastBorderColor: 'base-color-warning'
      };

    case 'error':
      return {
        iconName: 'icon-state-error-stroke',
        iconColor: 'content-color-error',
        toastBorderColor: 'base-color-error'
      };

    default:
      return {
        iconName: 'icon-state-info-stroke',
        iconColor: 'content-color-secondary',
        toastBorderColor: 'base-color-secondary'
      };
  }
}

var StyledDescriptionWrapper = styled.span.withConfig({
  displayName: "Toast__StyledDescriptionWrapper",
  componentId: "sc-aak2gm-0"
})(["color:", ";margin-right:", ";"], function (props) {
  return props.theme['content-color-primary'];
}, function (props) {
  return props.theme['spacing-xs'];
});
var StyledCloseButtonWrapper = styled.span.withConfig({
  displayName: "Toast__StyledCloseButtonWrapper",
  componentId: "sc-aak2gm-1"
})(["position:relative;top:-8px;"]);
var StyledToastWrapper = styled.div.withConfig({
  displayName: "Toast__StyledToastWrapper",
  componentId: "sc-aak2gm-2"
})(["border:", ";border-radius:", ";box-sizing:border-box;width:", ";background-color:", ";box-shadow:", ";border-left:", ";"], function (props) {
  return "".concat(props.theme['border-width-default'], " ").concat(props.theme['border-style-solid'], " ").concat(props.theme['border-color-strong']);
}, function (props) {
  return props.theme['border-radius-default'];
}, function (props) {
  return props.theme['toast-container-width'];
}, function (props) {
  return props.theme['background-color-primary'];
}, function (props) {
  return props.theme['toast-container-shadow'];
}, function (props) {
  return "".concat(props.theme['border-width-xl'], " ").concat(props.theme['border-style-solid'], " ").concat(props.theme[props.borderColor]);
});
var Toast = /*#__PURE__*/React.forwardRef(function Toast(props, ref) {
  var title = props.title,
      children = props.children,
      status = props.status,
      isDismissible = props.isDismissible,
      onDismiss = props.onDismiss,
      className = props.className;
  var toastStyle = getToastStyle(status);
  return /*#__PURE__*/React.createElement(StyledToastWrapper, {
    ref: ref,
    borderColor: toastStyle.toastBorderColor,
    tabIndex: "0",
    "aria-live": "polite",
    role: "region",
    className: className
  }, /*#__PURE__*/React.createElement(Flex, {
    padding: {
      paddingTop: 'spacing-l',
      paddingBottom: 'spacing-l',
      paddingLeft: 'spacing-l',
      paddingRight: 'spacing-s'
    },
    gap: "spacing-s"
  }, /*#__PURE__*/React.createElement(Icon, {
    name: toastStyle.iconName,
    color: toastStyle.iconColor
  }), /*#__PURE__*/React.createElement(Flex, {
    direction: "column",
    gap: "spacing-xs",
    shrink: 1,
    grow: 1,
    padding: {
      paddingLeft: 'spacing-xs'
    }
  }, title && /*#__PURE__*/React.createElement(Heading, {
    type: "h5",
    text: title
  }), /*#__PURE__*/React.createElement(Text, {
    type: "para",
    color: "content-color-primary"
  }, /*#__PURE__*/React.createElement(StyledDescriptionWrapper, null, children))), isDismissible ? /*#__PURE__*/React.createElement(StyledCloseButtonWrapper, null, /*#__PURE__*/React.createElement(Button, {
    type: "tertiary",
    icon: "icon-action-close-stroke",
    onClick: onDismiss
  })) : ''));
});
Toast.displayName = 'Toast';
export default Toast;
Toast.defaultProps = {
  title: '',
  status: 'info',
  isDismissible: true,
  onDismiss: function onDismiss() {},
  className: ''
};
Toast.propTypes = {
  title: PropTypes.string,
  status: PropTypes.oneOf(['info', 'success', 'warning', 'error']),
  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]).isRequired,
  isDismissible: PropTypes.bool,
  onDismiss: PropTypes.func,
  className: PropTypes.string
};