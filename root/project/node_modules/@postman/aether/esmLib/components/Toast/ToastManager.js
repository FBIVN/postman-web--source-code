function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

import React, { useContext } from 'react';
import ReactDOM from 'react-dom';
import ToastComponent from './Toast'; // validates the browser environment

var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement); // creating ToastContext

var ToastContext = /*#__PURE__*/React.createContext();
var Provider = ToastContext.Provider;
/**
 * @description ToastProvider abstracts out the complexity of Toast management
 * It includes adding new toasts outside the regular dom flow, stacking of toasts
 * disposing of toasts, auto disposal of toasts etc.
 */

export var ToastProvider = /*#__PURE__*/function (_React$Component) {
  _inherits(ToastProvider, _React$Component);

  var _super = _createSuper(ToastProvider);

  function ToastProvider() {
    var _this;

    _classCallCheck(this, ToastProvider);

    _this = _super.call(this);
    _this.state = {
      // contains each toast info
      toastArr: []
    }; // used to generate unique key for toasts

    _this.toastCounter = 0;
    _this.addToast = _this.addToast.bind(_assertThisInitialized(_this));
    _this.removeToast = _this.removeToast.bind(_assertThisInitialized(_this));
    return _this;
  }
  /**
   * @description used to add a new toast in the page
   * @param {object} props contains toast config provided by user
   */


  _createClass(ToastProvider, [{
    key: "addToast",
    value: function addToast(props) {
      var _this2 = this;

      // unique toast key
      var toastKey = "toast".concat(this.toastCounter);
      this.toastCounter += 1;
      var toastArr = this.state.toastArr; // disposing the the toast after specified time

      var clearTimer = setTimeout(function () {
        var tmpToastArr = _this2.state.toastArr;
        var updatedToastArr = tmpToastArr.filter(function (toastProp) {
          return toastProp.toastKey !== toastKey;
        });

        _this2.setState({
          toastArr: updatedToastArr
        });
      }, props.duration || 5000);

      var newToastProps = _objectSpread(_objectSpread({}, props), {}, {
        toastKey: toastKey,
        clearTimer: clearTimer
      }); // updating with new toast


      this.setState({
        toastArr: [].concat(_toConsumableArray(toastArr), [newToastProps])
      });
    }
    /**
     * @description used to remove a particular toast from the page when user clicks on close button
     * @param {string} toastKey is the unique key for the toasts
     */

  }, {
    key: "removeToast",
    value: function removeToast(toastKey) {
      var toastArr = this.state.toastArr;
      var updatedToastArr = toastArr.filter(function (toastProp) {
        return toastProp.toastKey !== toastKey;
      }); // for clearing the timer

      var removedToast = toastArr.find(function (toastProp) {
        return toastProp.toastKey === toastKey;
      });

      if (removedToast.clearTimer) {
        clearTimeout(removedToast.clearTimer);
      }

      this.setState({
        toastArr: updatedToastArr
      });
    }
  }, {
    key: "render",
    value: function render() {
      // eslint-disable-next-line react/prop-types
      var children = this.props.children;
      var addToast = this.addToast,
          removeToast = this.removeToast;
      var portalTarget = null;

      if (canUseDOM) {
        portalTarget = document.getElementById('aether-toast-notifications__container') || document.body;
      }

      var toastArr = this.state.toastArr;
      var toastElements = toastArr.map(function (toastProp) {
        var title = toastProp.title,
            status = toastProp.status,
            description = toastProp.description,
            isDismissible = toastProp.isDismissible,
            _onDismiss = toastProp.onDismiss,
            className = toastProp.className,
            toastKey = toastProp.toastKey,
            clearTimer = toastProp.clearTimer;
        return /*#__PURE__*/React.createElement(ToastComponent, {
          title: title,
          status: status,
          isDismissible: isDismissible,
          onDismiss: function onDismiss() {
            removeToast(toastKey);
            if (_onDismiss) _onDismiss();
          },
          className: className,
          key: toastKey,
          id: toastKey,
          clearTimer: clearTimer
        }, description);
      });
      return /*#__PURE__*/React.createElement(Provider, {
        value: {
          addToast: addToast
        }
      }, /*#__PURE__*/React.createElement(React.Fragment, null, children, /*#__PURE__*/ReactDOM.createPortal(toastElements, portalTarget)));
    }
  }]);

  return ToastProvider;
}(React.Component);
export default function useToasts() {
  var context = useContext(ToastContext);
  return {
    addToast: context.addToast
  };
}