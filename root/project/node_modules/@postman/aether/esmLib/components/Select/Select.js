import React from 'react';
import styled from 'styled-components';
import propTypes from 'prop-types';
import Icon from '../Icon/Icon';
import Label from '../Label/Label';
import Text from '../Text/Text';
import Options from './Options';
/**
 * Function to get the CSS for the select's trigger.
 * @param {string} type - defines the variant of the trigger. Eg: outline, tertiary
 * @param {string} validationState - validation state for the Select component
 * @param {object} theme - theme object containing theme specific design tokens
 */

function getSelectTriggerStyles(type, validationState, theme) {
  var status = validationState.status;
  var statusColor = status ? "select-trigger-".concat(status, "-border-color") : '';

  switch (type) {
    case 'tertiary':
      return "\n        border: none;\n        &:focus {\n          outline: none;\n          box-shadow: 0 0 0 2px ".concat(theme['input-shadow-focus'], ";\n        }\n      ");

    default:
      return "\n        border:\n        ".concat(theme['border-width-default'], "\n        ").concat(theme['border-style-solid'], "\n        ").concat(status ? theme[statusColor] : theme['select-trigger-border-color'], ";\n\n        &:focus {\n          outline: none;\n          border: ").concat(theme['border-width-default'], "\n            ").concat(theme['border-style-solid'], " ").concat(theme['input-border-color-focus'], ";\n          box-shadow: 0 0 0 2px ").concat(theme['input-shadow-focus'], ";\n        }\n\n        &:disabled {\n          border:\n            ").concat(theme['border-width-default'], "\n            ").concat(theme['border-style-solid'], "\n            ").concat(status ? theme[statusColor] : theme['select-trigger-disabled-border-color'], ";\n        }\n      ");
  }
}
/**
 * Function to get the CSS for select trigger size based on the size prop
 * @param {string} size - parameter for trigger size. Eg: small, medium
 * @param {boolean} fullWidth - specifies if trigger should expand to full width of its parent
 * @param {object} theme - theme object containing theme specific design tokens
 */


function getSelectTriggerSizeStyles(size, fullWidth, theme) {
  switch (size) {
    case 'small':
      return "\n        height: ".concat(theme['size-s'], ";\n        ").concat(fullWidth ? 'width: 100%;' : 'width: fit-content', ";\n      ");

    default:
      return "\n        height: ".concat(theme['size-m'], ";\n        ").concat(fullWidth ? 'width: 100%;' : 'width: fit-content', ";\n      ");
  }
}
/**
 * Function to get the color styles for validation message
 * @param {string} type - string to accept the validation status of the Select
 */


function getValidationMessageStyles(type, theme) {
  var validationColor = "content-color-".concat(type);
  return "color: ".concat(theme[validationColor]);
}

var StyledSelectContainer = styled.div.withConfig({
  displayName: "Select__StyledSelectContainer",
  componentId: "sc-vzmkg1-0"
})(["display:flex;flex-direction:column;"]);
var StyledSelectLabelContainer = styled.div.withConfig({
  displayName: "Select__StyledSelectLabelContainer",
  componentId: "sc-vzmkg1-1"
})(["display:flex;flex-direction:column;user-select:none;", ""], function (props) {
  return props.label || props.helperText ? "margin-bottom: ".concat(props.theme['spacing-xs'], ";") : undefined;
});
var StyledSelectTriggerContainer = styled.div.withConfig({
  displayName: "Select__StyledSelectTriggerContainer",
  componentId: "sc-vzmkg1-2"
})(["position:relative;", ";& .ds-select__trigger--left-icon{position:absolute;pointer-events:none;right:", ";top:", ";}"], function (props) {
  return getSelectTriggerSizeStyles(props.size, props.fullWidth, props.theme);
}, function (props) {
  return props.theme['spacing-s'];
}, function (props) {
  if (props.size === 'small') {
    return "".concat(props.theme['spacing-xs']);
  }

  return "".concat(props.theme['spacing-s']);
});
var StyledSelect = styled.select.withConfig({
  displayName: "Select__StyledSelect",
  componentId: "sc-vzmkg1-3"
})(["appearance:none;box-sizing:border-box;height:100%;width:100%;border-radius:", ";background-color:transparent;color:", ";font-size:", ";padding-left:", ";padding-right:", ";transition:border-color 0.2s ease-in-out,box-shadow 0.2s ease-in-out;user-select:none;", ";&:disabled{cursor:not-allowed;}"], function (props) {
  return props.theme['border-radius-default'];
}, function (props) {
  return props.theme['content-color-primary'];
}, function (props) {
  return props.theme['text-size-m'];
}, function (props) {
  return props.theme['spacing-m'];
}, function (props) {
  return props.theme['spacing-xl'];
}, function (props) {
  return getSelectTriggerStyles(props.type, props.validationState, props.theme);
});
var StyledValidationMessage = styled.p.withConfig({
  displayName: "Select__StyledValidationMessage",
  componentId: "sc-vzmkg1-4"
})(["display:flex;align-items:center;", ";font-size:", ";line-height:", ";margin:", " ", " ", " ", ";.validation-message-icon{margin-right:", ";}"], function (props) {
  return getValidationMessageStyles(props.type, props.theme);
}, function (props) {
  return props.theme['text-size-s'];
}, function (props) {
  return props.theme['line-height-s'];
}, function (props) {
  return props.theme['spacing-xs'];
}, function (props) {
  return props.theme['spacing-zero'];
}, function (props) {
  return props.theme['spacing-zero'];
}, function (props) {
  return props.theme['spacing-zero'];
}, function (props) {
  return props.theme['spacing-xs'];
});
var Select = /*#__PURE__*/React.forwardRef(function Select(props, ref) {
  var children = props.children,
      isDisabled = props.isDisabled,
      placeholder = props.placeholder,
      name = props.name,
      id = props.id,
      label = props.label,
      helperText = props.helperText,
      type = props.type,
      size = props.size,
      fullWidth = props.fullWidth,
      validationState = props.validationState;
  var selectRef = ref || /*#__PURE__*/React.createRef();
  var clonedChildren = React.Children.map(children, function (child) {
    if ( /*#__PURE__*/React.isValidElement(child) && child.type === Options) {
      return /*#__PURE__*/React.cloneElement(child, {
        placeholder: placeholder
      });
    }

    return null;
  });
  return /*#__PURE__*/React.createElement(StyledSelectContainer, null, /*#__PURE__*/React.createElement(StyledSelectLabelContainer, {
    label: label,
    helperText: helperText,
    className: "ds-select__label"
  }, /*#__PURE__*/React.createElement(Label, {
    htmlFor: id,
    isDisabled: isDisabled,
    text: label
  }), label && helperText ? /*#__PURE__*/React.createElement(Text, {
    type: "body-small",
    color: "content-color-secondary"
  }, helperText) : null), /*#__PURE__*/React.createElement(StyledSelectTriggerContainer, {
    className: "ds-select__trigger",
    size: size,
    fullWidth: fullWidth
  }, /*#__PURE__*/React.createElement(StyledSelect, {
    ref: selectRef,
    type: type,
    name: name,
    id: id,
    disabled: isDisabled,
    placeholder: placeholder,
    validationState: validationState
  }, clonedChildren), /*#__PURE__*/React.createElement(Icon, {
    name: "icon-direction-down",
    color: "content-color-primary",
    className: "ds-select__trigger--left-icon"
  })), validationState.status && validationState.message && /*#__PURE__*/React.createElement(StyledValidationMessage, {
    type: validationState.status
  }, /*#__PURE__*/React.createElement(Icon, {
    color: "content-color-".concat(validationState.status),
    className: "validation-message-icon",
    name: "icon-state-".concat(validationState.status, "-stroke-small"),
    size: "small"
  }), validationState.message));
});
export default Select;
Select.defaultProps = {
  label: '',
  helperText: '',
  placeholder: 'Select Option',
  isDisabled: false,
  fullWidth: false,
  id: null,
  name: null,
  type: 'outline',
  size: 'medium',
  validationState: {
    status: null,
    message: ''
  }
};
Select.propTypes = {
  label: propTypes.string,
  helperText: propTypes.string,
  placeholder: propTypes.string,
  isDisabled: propTypes.bool,
  fullWidth: propTypes.bool,
  id: propTypes.string,
  name: propTypes.string,
  type: propTypes.oneOf(['outline', 'tertiary']),
  size: propTypes.oneOf(['small', 'medium']),
  validationState: propTypes.shape({
    status: propTypes.oneOf(['error', 'warning', null]),
    message: propTypes.string
  }),
  children: propTypes.oneOfType([propTypes.arrayOf(propTypes.node), propTypes.node]).isRequired
};