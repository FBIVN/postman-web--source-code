import React from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';
import Flex from '../Flex/Flex';
import Icon from '../Icon/Icon';
import Button from '../Button/Button';
import Heading from '../Heading/Heading';
import Text from '../Text/Text'; // define Banner styles based on status

function getBannerStyle(status) {
  switch (status) {
    case 'neutral':
      return {
        iconName: 'icon-state-info-stroke',
        iconColor: 'content-color-secondary',
        bannerBackgroundColor: 'background-color-secondary',
        role: 'status'
      };

    case 'info':
      return {
        iconName: 'icon-state-info-stroke',
        iconColor: 'content-color-info',
        bannerBackgroundColor: 'background-color-info',
        role: 'status'
      };

    case 'success':
      return {
        iconName: 'icon-state-success-stroke',
        iconColor: 'content-color-success',
        bannerBackgroundColor: 'background-color-success',
        role: 'status'
      };

    case 'warning':
      return {
        iconName: 'icon-state-warning-stroke',
        iconColor: 'content-color-warning',
        bannerBackgroundColor: 'background-color-warning',
        role: 'alert'
      };

    case 'error':
      return {
        iconName: 'icon-state-error-stroke',
        iconColor: 'content-color-error',
        bannerBackgroundColor: 'background-color-error',
        role: 'alert'
      };

    default:
      return {
        iconName: 'icon-state-info-stroke',
        iconColor: 'content-color-secondary',
        bannerBackgroundColor: 'background-color-secondary',
        role: 'status'
      };
  }
}

var StyledLocalBannerWrapper = styled.div.withConfig({
  displayName: "Banner__StyledLocalBannerWrapper",
  componentId: "sc-2k6jy3-0"
})(["background-color:", ";border-radius:", ";width:", ";"], function (props) {
  return props.theme[props.bgColor];
}, function (props) {
  return props.theme['border-radius-default'];
}, function (props) {
  return props.width;
});
var StyledGlobalBannerWrapper = styled.div.withConfig({
  displayName: "Banner__StyledGlobalBannerWrapper",
  componentId: "sc-2k6jy3-1"
})(["background-color:", ";"], function (props) {
  return props.theme[props.bgColor];
}); // This component is intentionally introduced to position banner icon in a pixel perfect manner

var StyledBannerIconWrapper = styled.span.withConfig({
  displayName: "Banner__StyledBannerIconWrapper",
  componentId: "sc-2k6jy3-2"
})(["padding-top:2px;"]);
var StyledLocalCloseButtonWrapper = styled.span.withConfig({
  displayName: "Banner__StyledLocalCloseButtonWrapper",
  componentId: "sc-2k6jy3-3"
})(["position:relative;bottom:8px;left:4px;& button{svg path{fill:", ";}:hover{background-color:", ";}}"], function (props) {
  return props.theme['content-color-primary'];
}, function (props) {
  return props.theme['banner-close-button-hover-color'];
});
var StyledGlobalCloseButtonWrapper = styled.span.withConfig({
  displayName: "Banner__StyledGlobalCloseButtonWrapper",
  componentId: "sc-2k6jy3-4"
})(["& button{svg path{fill:", ";}:hover{background-color:", ";}}"], function (props) {
  return props.theme['content-color-primary'];
}, function (props) {
  return props.theme['banner-close-button-hover-color'];
});
var Banner = /*#__PURE__*/React.forwardRef(function Banner(props, ref) {
  var title = props.title,
      type = props.type,
      children = props.children,
      status = props.status,
      primaryAction = props.primaryAction,
      secondaryAction = props.secondaryAction,
      width = props.width,
      onDismiss = props.onDismiss,
      hideIcon = props.hideIcon,
      className = props.className;
  var bannerStyle = getBannerStyle(status); // shows primary button only when aether button component with type outline provided

  var renderPrimaryAction = function renderPrimaryAction(primaryActionComp) {
    if (primaryActionComp && primaryActionComp.type === Button) {
      var ButtonType = primaryActionComp.props && primaryActionComp.props.type; // The Flex wrapper is an intentional one(required for global type)
      // to avoid button with longer text space auto manage by browser

      if (ButtonType === 'outline') return /*#__PURE__*/React.createElement(Flex, null, primaryActionComp);
    }

    return null;
  }; // shows secondary button only when aether button component with type monochrome-plain provided


  var renderSecondaryAction = function renderSecondaryAction(secondaryActionComp) {
    if (secondaryActionComp && secondaryActionComp.type === Button) {
      var ButtonType = secondaryActionComp.props && secondaryActionComp.props.type;
      if (ButtonType === 'monochrome-plain') return /*#__PURE__*/React.createElement(Text, {
        color: "content-color-primary"
      }, secondaryActionComp);
    }

    return null;
  };

  return type === 'local' ? /*#__PURE__*/React.createElement(StyledLocalBannerWrapper, {
    ref: ref,
    role: bannerStyle.role,
    bgColor: bannerStyle.bannerBackgroundColor,
    className: className,
    width: width
  }, /*#__PURE__*/React.createElement(Flex, {
    padding: {
      paddingTop: 'spacing-l',
      paddingBottom: 'spacing-l',
      paddingLeft: 'spacing-l',
      paddingRight: 'spacing-m'
    },
    gap: "spacing-m"
  }, hideIcon ? '' : /*#__PURE__*/React.createElement(StyledBannerIconWrapper, null, /*#__PURE__*/React.createElement(Icon, {
    name: bannerStyle.iconName,
    color: bannerStyle.iconColor
  })), /*#__PURE__*/React.createElement(Flex, {
    direction: "column",
    gap: "spacing-xs",
    shrink: 1,
    grow: 1,
    padding: {
      paddingRight: 'spacing-s'
    }
  }, title && /*#__PURE__*/React.createElement(Heading, {
    type: "h4",
    text: title
  }), /*#__PURE__*/React.createElement(Text, {
    type: "para",
    color: "content-color-primary",
    maxWidth: "100%"
  }, children), primaryAction || secondaryAction ? /*#__PURE__*/React.createElement(Flex, {
    gap: "spacing-l",
    alignItems: "center",
    padding: {
      paddingTop: 'spacing-m'
    }
  }, renderPrimaryAction(primaryAction), renderSecondaryAction(secondaryAction)) : ''), onDismiss ? /*#__PURE__*/React.createElement(StyledLocalCloseButtonWrapper, null, /*#__PURE__*/React.createElement(Button, {
    type: "tertiary",
    icon: "icon-action-close-stroke",
    onClick: onDismiss
  })) : '')) : /*#__PURE__*/React.createElement(StyledGlobalBannerWrapper, {
    ref: ref,
    role: bannerStyle.role,
    bgColor: bannerStyle.bannerBackgroundColor,
    className: className,
    width: width
  }, /*#__PURE__*/React.createElement(Flex, {
    gap: "spacing-s",
    padding: {
      paddingLeft: 'spacing-l',
      paddingTop: 'spacing-s',
      paddingBottom: 'spacing-s',
      paddingRight: 'spacing-s'
    }
  }, hideIcon ? '' : /*#__PURE__*/React.createElement(StyledBannerIconWrapper, null, /*#__PURE__*/React.createElement(Icon, {
    name: bannerStyle.iconName,
    color: bannerStyle.iconColor
  })), /*#__PURE__*/React.createElement(Flex, {
    shrink: 1,
    grow: 1,
    padding: {
      paddingLeft: 'spacing-xs',
      paddingRight: 'spacing-l'
    }
  }, /*#__PURE__*/React.createElement(Text, {
    type: "para",
    color: "content-color-primary",
    maxWidth: "100%"
  }, children)), renderPrimaryAction(primaryAction), onDismiss ? /*#__PURE__*/React.createElement(StyledGlobalCloseButtonWrapper, null, /*#__PURE__*/React.createElement(Button, {
    size: "small",
    type: "tertiary",
    icon: "icon-action-close-stroke",
    onClick: onDismiss
  })) : ''));
});
Banner.displayName = 'Banner';
export default Banner;
Banner.defaultProps = {
  title: '',
  status: 'neutral',
  type: 'local',
  width: '100%',
  primaryAction: null,
  secondaryAction: null,
  onDismiss: null,
  hideIcon: false,
  className: ''
};
Banner.propTypes = {
  title: PropTypes.string,
  status: PropTypes.oneOf(['neutral', 'info', 'success', 'warning', 'error']),
  type: PropTypes.oneOf(['global', 'local']),
  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]).isRequired,
  primaryAction: function primaryAction(props) {
    var primaryAction = props.primaryAction;

    if (primaryAction) {
      if (primaryAction.type !== Button) return new Error('Banner: primaryAction prop only accepts Aether button component.');
      var ButtonType = primaryAction.props && primaryAction.props.type;
      if (ButtonType !== 'outline') return new Error('Banner: primaryAction prop only accepts button type outline.');
    }

    return null;
  },
  secondaryAction: function secondaryAction(props) {
    var secondaryAction = props.secondaryAction;

    if (secondaryAction) {
      if (secondaryAction.type !== Button) return new Error('Banner: secondaryAction prop only accepts Aether button component.');
      var ButtonType = secondaryAction.props && secondaryAction.props.type;
      if (ButtonType !== 'monochrome-plain') return new Error('Banner: secondaryAction prop only accepts button type monochrome-plain.');
    }

    return null;
  },
  width: PropTypes.string,
  onDismiss: PropTypes.func,
  hideIcon: PropTypes.bool,
  className: PropTypes.string
};