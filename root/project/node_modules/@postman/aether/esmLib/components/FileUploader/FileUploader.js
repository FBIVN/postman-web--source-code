function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import React, { useState, useRef } from 'react';
import styled from 'styled-components';
import PropTypes from 'prop-types';
import Flex from '../Flex/Flex';
import Label from '../Label/Label';
import Text from '../Text/Text';
import Button from '../Button/Button';
import Icon from '../Icon/Icon';
var StyledInputFile = styled.input.attrs({
  type: 'file'
}).withConfig({
  displayName: "FileUploader__StyledInputFile",
  componentId: "sc-9xmjvi-0"
})(["height:0.1px;opacity:0;width:0.1px;z-index:-1;&:focus + label{box-shadow:", ";outline:none;}"], function (props) {
  return props.theme['shadow-focus'];
});
var StyledFileUploaderLabel = styled.label.withConfig({
  displayName: "FileUploader__StyledFileUploaderLabel",
  componentId: "sc-9xmjvi-1"
})(["user-select:none;color:", ";line-height:", ";font-size:", ";width:max-content;display:inline-block;padding:", ";box-shadow:", ";box-sizing:border-box;border-radius:", ";margin-top:", ";&:hover{cursor:", ";box-shadow:", ";}"], function (props) {
  return props.isDisabled ? props.theme['content-color-tertiary'] : props.theme['content-color-primary'];
}, function (props) {
  return props.theme['line-height-s'];
}, function (props) {
  return props.theme['text-size-m'];
}, function (props) {
  return "".concat(props.theme['spacing-s'], " ").concat(props.theme['spacing-m']);
}, function (props) {
  return props.theme['button-outline-border-color'];
}, function (props) {
  return props.theme['border-radius-default'];
}, function (props) {
  return props.theme['spacing-s'];
}, function (props) {
  return props.isDisabled ? 'not-allowed' : 'pointer';
}, function (props) {
  return !props.isDisabled && props.theme['button-outline-hover-border-color'];
});
var StyleFileListWrapper = styled.div.withConfig({
  displayName: "FileUploader__StyleFileListWrapper",
  componentId: "sc-9xmjvi-2"
})(["width:320px;height:32px;border-radius:", ";padding-left:", ";display:flex;justify-content:space-between;align-items:'center';background-color:", ";& .aether-remove-uploaded-file-btn{border-top-left-radius:0;border-bottom-left-radius:0;}color:", ";"], function (props) {
  return props.theme['border-radius-default'];
}, function (props) {
  return props.theme['spacing-m'];
}, function (props) {
  return props.theme['background-color-secondary'];
}, function (props) {
  return props.theme['content-color-primary'];
});
var StyledFileNameContainer = styled.div.withConfig({
  displayName: "FileUploader__StyledFileNameContainer",
  componentId: "sc-9xmjvi-3"
})(["display:flex;align-items:center;width:258px;"]);
var FileUploader = /*#__PURE__*/React.forwardRef(function FileUploader(props, ref) {
  var label = props.label,
      helperText = props.helperText,
      actionLabel = props.actionLabel,
      id = props.id,
      name = props.name,
      className = props.className,
      isDisabled = props.isDisabled,
      multiple = props.multiple,
      onChange = props.onChange,
      accept = props.accept;

  var _useState = useState([]),
      _useState2 = _slicedToArray(_useState, 2),
      fileDetails = _useState2[0],
      setFileDetails = _useState2[1]; // setTimeout closure uses older value as reference, using ref to access the latest value
  // https://github.com/facebook/react/issues/14010


  var fileDetailsRef = useRef(fileDetails);
  fileDetailsRef.current = fileDetails; // inputRef is being used to access uploaded local files

  var inputRef = useRef(null);
  inputRef = ref || inputRef;

  var handleFileUpload = function handleFileUpload(e) {
    var fileInputEle = e.target;
    var files = fileInputEle && fileInputEle.files;

    if (files.length > 0) {
      setFileDetails(Object.values(files).map(function (file) {
        // this is the file details state controlling appearance of file chips
        return {
          name: file.name,
          isHovered: false,
          fileUploadState: 'success'
        };
      }));
    } else {
      setFileDetails([]);
    }

    if (onChange && !isDisabled) {
      onChange(files);
    }

    setTimeout(function () {
      var tmpFileDetails = JSON.parse(JSON.stringify(fileDetailsRef.current));

      for (var index = 0; index < tmpFileDetails.length; index += 1) {
        tmpFileDetails[index].isHovered = true;
      }

      setFileDetails(tmpFileDetails);
    }, 2000);
  };

  var handleClear = function handleClear(deletedFileName) {
    var inputFileStore = inputRef.current && inputRef.current.files;
    var dataTransferObj = new DataTransfer();

    for (var i = 0; i < inputFileStore.length; i += 1) {
      var file = inputFileStore[i]; // here you exclude the file. thus removing it.

      if (deletedFileName !== file.name) dataTransferObj.items.add(file);
    } // update visual


    setFileDetails(fileDetails.filter(function (file) {
      return deletedFileName !== file.name;
    })); // update local file content

    inputRef.current.files = dataTransferObj.files;

    if (onChange && !isDisabled) {
      onChange(inputRef.current.files);
    }
  }; // handler function adding close button to appear immediately once hovered over file chip
  // in stead of waiting for 4000ms


  var handleFileChipHover = function handleFileChipHover(index) {
    var tmpFileDetails = JSON.parse(JSON.stringify(fileDetails));

    if (tmpFileDetails[index]) {
      tmpFileDetails[index].isHovered = true;
    }

    setFileDetails(tmpFileDetails);
  }; // defines rendering logic of file chip


  var generateFileChip = function generateFileChip(file, index) {
    return /*#__PURE__*/React.createElement(StyleFileListWrapper, {
      className: "aether-file-list-wrapper",
      key: file.name,
      onMouseEnter: function onMouseEnter() {
        // invokes the handler to show remove option for hovered file chip
        handleFileChipHover(index);
      }
    }, /*#__PURE__*/React.createElement(StyledFileNameContainer, null, /*#__PURE__*/React.createElement(Text, {
      type: "body-medium",
      isTruncated: true
    }, file.name)), file.isHovered ? /*#__PURE__*/React.createElement(Button, {
      className: "aether-remove-uploaded-file-btn",
      onClick: function onClick() {
        handleClear(file.name);
      },
      type: "tertiary",
      icon: "icon-action-close-stroke"
    }) : /*#__PURE__*/React.createElement(Flex, {
      padding: {
        paddingRight: 'spacing-s'
      },
      alignItems: "center"
    }, /*#__PURE__*/React.createElement(Icon, {
      name: "icon-state-success-stroke",
      color: "content-color-success"
    })));
  };

  return /*#__PURE__*/React.createElement(Flex, {
    direction: "column",
    width: "max-content"
  }, /*#__PURE__*/React.createElement(Label, {
    size: "medium"
  }, label), helperText && /*#__PURE__*/React.createElement(Text, {
    type: "para",
    color: "content-color-secondary"
  }, helperText), /*#__PURE__*/React.createElement(StyledInputFile, {
    id: id,
    ref: inputRef,
    onChange: handleFileUpload,
    multiple: multiple,
    disabled: isDisabled,
    accept: accept,
    name: name,
    className: className
  }), /*#__PURE__*/React.createElement(StyledFileUploaderLabel, {
    htmlFor: id,
    isDisabled: isDisabled
  }, actionLabel), /*#__PURE__*/React.createElement(Flex, {
    direction: "column",
    padding: {
      paddingTop: 'spacing-l'
    },
    gap: "spacing-xs"
  }, fileDetails.map(function (file, index) {
    return generateFileChip(file, index);
  })));
});
FileUploader.defaultProps = {
  helperText: '',
  actionLabel: 'Add Files',
  isDisabled: false,
  multiple: false,
  accept: '*',
  name: '',
  className: ''
};
FileUploader.propTypes = {
  label: PropTypes.string.isRequired,
  onChange: PropTypes.func.isRequired,
  helperText: PropTypes.string,
  actionLabel: PropTypes.node,
  id: PropTypes.string.isRequired,
  name: PropTypes.string,
  className: PropTypes.string,
  isDisabled: PropTypes.bool,
  multiple: PropTypes.bool,
  accept: PropTypes.string
};
FileUploader.displayName = 'FileUploader';
export default FileUploader;