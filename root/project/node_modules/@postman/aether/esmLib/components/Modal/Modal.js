function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React, { useEffect } from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';
import ReactModal from 'react-modal';
import Flex from '../Flex/Flex';
import Button from '../Button/Button';
import Heading from '../Heading/Heading';
import { globals } from '../../design-tokens/tokens';
import { BACKGROUND_MODAL_BACKDROP } from './ModalTokens';
var StyledCloseButtonWrapper = styled.span.withConfig({
  displayName: "Modal__StyledCloseButtonWrapper",
  componentId: "sc-157rzzw-0"
})(["position:relative;left:8px;bottom:8px;"]);
var ModalHeader = /*#__PURE__*/React.forwardRef(function ModalHeader(props, ref) {
  var heading = props.heading,
      onClose = props.onClose,
      hideCloseButton = props.hideCloseButton,
      className = props.className;
  return /*#__PURE__*/React.createElement(Flex, {
    gap: "spacing-xs",
    justifyContent: "space-between",
    ref: ref,
    grow: 1,
    shrink: 1,
    className: className,
    padding: {
      paddingBottom: 'spacing-xs',
      paddingLeft: 'spacing-xl',
      paddingRight: 'spacing-xl',
      paddingTop: 'spacing-xl'
    }
  }, /*#__PURE__*/React.createElement(Heading, {
    _wordBreak: "break-word",
    type: "h2",
    text: heading,
    color: "content-color-primary"
  }), hideCloseButton ? '' : /*#__PURE__*/React.createElement(StyledCloseButtonWrapper, null, /*#__PURE__*/React.createElement(Button, {
    type: "tertiary",
    icon: "icon-action-close-stroke",
    onClick: onClose
  })));
});
ModalHeader.defaultProps = {
  hideCloseButton: false,
  onClose: function onClose() {},
  className: ''
};
ModalHeader.propTypes = {
  heading: PropTypes.string.isRequired,
  onClose: PropTypes.func,
  hideCloseButton: PropTypes.bool,
  className: PropTypes.string
};
var StyledModalContent = styled.div.withConfig({
  displayName: "Modal__StyledModalContent",
  componentId: "sc-157rzzw-1"
})(["color:", ";display:flex;flex-direction:column;flex-grow:1;flex-shrink:1;overflow-y:auto;padding-left:", ";padding-right:", ";padding-bottom:", ";padding-top:", ";margin-bottom:", ";& > *:not(:last-child){margin-bottom:", ";}"], function (props) {
  return props.theme['content-color-secondary'];
}, function (props) {
  return props.theme['spacing-xl'];
}, function (props) {
  return props.theme['spacing-xl'];
}, function (props) {
  return props.theme['spacing-s'];
}, function (props) {
  return props.theme['spacing-xs'];
}, function (props) {
  return props.theme['spacing-l'];
}, function (props) {
  return props.theme[props.gap];
});
var ModalContent = /*#__PURE__*/React.forwardRef(function ModalContent(props, ref) {
  var children = props.children,
      gap = props.gap,
      className = props.className;
  return /*#__PURE__*/React.createElement(StyledModalContent, {
    ref: ref,
    gap: gap,
    className: className
  }, children);
});
ModalContent.defaultProps = {
  gap: 'spacing-s',
  className: ''
};
ModalContent.propTypes = {
  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]).isRequired,
  gap: PropTypes.oneOf(Object.keys(globals.spacing)),
  className: PropTypes.string
};
var ModalFooter = /*#__PURE__*/React.forwardRef(function ModalFooter(props, ref) {
  var children = props.children,
      className = props.className;
  return /*#__PURE__*/React.createElement(Flex, {
    ref: ref,
    alignItems: "flex-start",
    padding: {
      paddingLeft: 'spacing-xl',
      paddingRight: 'spacing-xl',
      paddingBottom: 'spacing-xl'
    },
    className: className
  }, children);
});
ModalFooter.defaultProps = {
  className: ''
};
ModalFooter.propTypes = {
  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]).isRequired,
  className: PropTypes.string
};

function getModalDimensions(modalSize) {
  switch (modalSize) {
    case 'small':
      return {
        maxWidth: '440px'
      };

    case 'large':
      return {
        maxWidth: '846px'
      };

    default:
      return {
        maxWidth: '648px'
      };
  }
}

var StyledModal = styled.div.withConfig({
  displayName: "Modal__StyledModal",
  componentId: "sc-157rzzw-2"
})(["background-color:", ";display:flex;flex-grow:1;flex-shrink:1;flex-direction:column;max-height:96vh;align-self:center;border-radius:", ";"], function (props) {
  return props.theme['background-color-primary'];
}, function (props) {
  return props.theme['border-radius-default'];
});
var Modal = /*#__PURE__*/React.forwardRef(function Modal(props, ref) {
  var onClose = props.onClose,
      isOpen = props.isOpen,
      contentLabel = props.contentLabel,
      children = props.children,
      size = props.size,
      parentSelector = props.parentSelector,
      id = props.id,
      className = props.className;
  var defaultModalStyles = {
    overlay: {
      position: 'fixed',
      backgroundColor: BACKGROUND_MODAL_BACKDROP,
      zIndex: 120
    },
    content: _objectSpread({
      display: 'flex',
      position: 'relative',
      border: 'none',
      top: globals.spacing['spacing-zero'],
      bottom: globals.spacing['spacing-zero'],
      left: globals.spacing['spacing-zero'],
      right: globals.spacing['spacing-zero'],
      margin: 'auto',
      height: '100%',
      overflow: 'hidden',
      background: 'none',
      padding: globals.spacing['spacing-zero']
    }, getModalDimensions(size))
  };
  var childComponents = React.Children.map(children, function (child) {
    if ( /*#__PURE__*/React.isValidElement(child) && child.type === ModalHeader) {
      return /*#__PURE__*/React.cloneElement(child, {
        onClose: onClose
      });
    }

    return child;
  }); // This effect is added, to prevent scroll on overlay content when modal is open.

  useEffect(function () {
    var bodyElement = document && document.body;

    if (bodyElement) {
      // unset resets the style to its actual inherited value
      bodyElement.style.overflow = isOpen ? 'hidden' : 'unset';
    }
  }, [isOpen]);

  if (parentSelector) {
    return /*#__PURE__*/React.createElement(ReactModal, {
      isOpen: isOpen,
      style: defaultModalStyles,
      onRequestClose: onClose,
      contentLabel: contentLabel,
      ariaHideApp: false,
      shouldCloseOnOverlayClick: false,
      shouldCloseOnEsc: true,
      parentSelector: parentSelector,
      closeTimeoutMS: 250
    }, /*#__PURE__*/React.createElement(StyledModal, {
      id: id,
      className: className,
      ref: ref
    }, childComponents));
  }

  return /*#__PURE__*/React.createElement(ReactModal, {
    isOpen: isOpen,
    style: defaultModalStyles,
    onRequestClose: onClose,
    contentLabel: contentLabel,
    ariaHideApp: false,
    shouldCloseOnOverlayClick: false,
    shouldCloseOnEsc: true,
    closeTimeoutMS: 250
  }, /*#__PURE__*/React.createElement(StyledModal, {
    id: id,
    className: className,
    ref: ref
  }, childComponents));
});
Modal.defaultProps = {
  isOpen: false,
  contentLabel: 'Modal',
  id: '',
  className: '',
  size: 'medium',
  parentSelector: null
};
Modal.propTypes = {
  isOpen: PropTypes.bool,
  onClose: PropTypes.func.isRequired,
  children: PropTypes.arrayOf(PropTypes.element).isRequired,
  size: PropTypes.oneOf(['small', 'medium', 'large']),
  contentLabel: PropTypes.string,
  parentSelector: PropTypes.func,
  id: PropTypes.string,
  className: PropTypes.string
};
Modal.displayName = 'Modal';
ModalHeader.displayName = 'ModalHeader';
ModalContent.displayName = 'ModalContent';
ModalFooter.displayName = 'ModalFooter';
export { Modal, ModalHeader, ModalContent, ModalFooter };