import React, { Children, cloneElement, isValidElement } from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';
import TabList from './TabList';
import TabPanels from './TabPanels';
var StyledTabsWrapper = styled.div.withConfig({
  displayName: "Tabs__StyledTabsWrapper",
  componentId: "sc-86wa2v-0"
})(["padding:", ";"], function (props) {
  return props.theme['spacing-l'];
});
var Tabs = /*#__PURE__*/React.forwardRef(function Tabs(props, ref) {
  var type = props.type,
      activeTabIndex = props.activeTabIndex,
      onChange = props.onChange,
      className = props.className,
      children = props.children; // children are either TabList or TabPanels type

  var validChildren = Children.map(children, function (child) {
    // Checking isValidElement or not
    if ( /*#__PURE__*/isValidElement(child)) {
      if ([TabList].includes(child.type)) {
        return /*#__PURE__*/cloneElement(child, {
          _activeTabIndex: activeTabIndex,
          _type: type,
          _onChange: onChange
        });
      }

      if ([TabPanels].includes(child.type)) {
        return /*#__PURE__*/cloneElement(child, {
          _activeTabIndex: activeTabIndex
        });
      }
    }

    return null;
  });
  return /*#__PURE__*/React.createElement(StyledTabsWrapper, {
    ref: ref,
    className: className
  }, validChildren);
});
Tabs.defaultProps = {
  type: 'primary',
  className: ''
};
Tabs.propTypes = {
  type: PropTypes.oneOf(['primary', 'secondary']),
  onChange: PropTypes.func.isRequired,
  activeTabIndex: PropTypes.number.isRequired,
  className: PropTypes.string,
  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]).isRequired
};
Tabs.displayName = 'Tabs';
export default Tabs;