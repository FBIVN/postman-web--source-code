import React, { Children, isValidElement, cloneElement } from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';
import Tab from './Tab'; // generates the border style for label

function getLabelBorderStyle(type, theme) {
  if (type === 'secondary') {
    return "\n      &:after {\n        content: '';\n        position: relative;\n        left: 1px;\n        top: 4px;\n        display: inline-block;\n        height: 16px;\n        width: 1px;\n        box-shadow: -1px 0px 0px 0px ".concat(theme['border-color-strong'], " inset;\n      }\n    ");
  }

  return "";
}

var StyledTabList = styled.ul.withConfig({
  displayName: "TabList__StyledTabList",
  componentId: "sc-x3oj1v-0"
})(["display:flex;list-style-type:none;padding:0;background-color:", ";margin-left:", ";width:max-content;border-radius:", ";& > *:not(:last-child){", "}"], function (props) {
  return props.type === 'secondary' ? props.theme['background-color-tertiary'] : 'transparent';
}, function (props) {
  return props.type === 'primary' ? '-8px' : '0px';
}, function (props) {
  return props.theme['border-radius-default'];
}, function (props) {
  return getLabelBorderStyle(props.type, props.theme);
});
var TabList = /*#__PURE__*/React.forwardRef(function TabList(props, ref) {
  var counter = 0;
  var _type = props._type,
      _activeTabIndex = props._activeTabIndex,
      _onChange = props._onChange,
      className = props.className,
      children = props.children; // children are only Tab type

  var validChildren = Children.map(children, function (child) {
    var tabElement = child; // Checking isValidElement or not

    if ( /*#__PURE__*/isValidElement(child) && [Tab].includes(child.type)) {
      tabElement = /*#__PURE__*/cloneElement(child, {
        _isActive: counter === _activeTabIndex,
        _index: counter,
        _type: _type,
        _onChange: _onChange
      });
      counter += 1;
      return tabElement;
    }

    return null;
  });
  return /*#__PURE__*/React.createElement(StyledTabList, {
    ref: ref,
    className: className,
    type: _type
  }, validChildren);
});
TabList.defaultProps = {
  _type: 'primary',
  className: '',
  _activeTabIndex: 0,
  _onChange: function _onChange() {}
};
TabList.propTypes = {
  _type: PropTypes.oneOf(['primary', 'secondary']),
  _activeTabIndex: PropTypes.number,
  _onChange: PropTypes.func,
  className: PropTypes.string,
  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]).isRequired
};
TabList.displayName = 'TabList';
export default TabList;