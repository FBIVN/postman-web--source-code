var moment = require('moment'),
    groupBy = require('lodash.groupby'),
    isFunction = require('lodash.isfunction'),
    map = require('lodash.map'),
    sortBy = require('lodash.sortby'),

DateHelper = {
    /**
    @method getFormattedDate
    @param date type Milliseconds
    @usage
    used the generate the date to a standard format across the app
    @return
    String of formatted date
    @logic
    if `today` is *03/11/2016* then
    Any days between `01/11/2016 - 03/11/2016` will be a relative date (seconds ago, minutes ago, hours ago, days ago)
    And days between `01/11/2016 - 02/11/2015` Will be in normal date format for ( D MMM, YYY)
    - Two days after would be in standard format
    And days after that would be in (x Years ago format)
    **/

    getFormattedDate: function (date) {
        var today = moment(),
        startOfToday = today.startOf('day'),
        momentizedDate = moment(date).fromNow(),
        diffDays = startOfToday.diff(moment(date).startOf('day'), 'days');

        // Show relative date only for 2days below and for years
        if ((diffDays > 1 && diffDays < 30) ||
        momentizedDate.indexOf('months') != -1 ||
        momentizedDate.indexOf('weeks') != -1) {
            return moment(date).format('D MMM, YYYY');
        }

        return this.shrinkHoursMinutesAndSeconds(momentizedDate);
    },

    /**
    @method getFormattedDate
    @param date type Milliseconds
    @usage
    used the generate the date to a standard format across the app
    @return
    String of formatted date
    @logic
    if `today` is *03/11/2016* then
    Any time on *03/11/2016*  will be returned as Today HH:MM
    Any time on *03/11/2016*  will be returned as Yesterday HH:MM
    And days between `01/11/2016 - 02/11/2015` Will be in normal date format for ( D MMM, YYY)
    - Two days after would be in standard format
    And days after that would be in (x Years ago format)
    **/

    getFormattedDateAndTime: function (date) {
        var today = moment(),
        startOfToday = today.startOf('day'),
        momentizedDate = moment(date).fromNow(),
        diffDays = startOfToday.diff(moment(date).startOf('day'), 'days');

        if (diffDays === 0) {
            return 'Today, ' + moment(date).format('h:mm a');
        }

        if (diffDays === 1) {
            return 'Yesterday, ' + moment(date).format('h:mm a');
        }

        // Show reletive date only for 2days below and for years
        if ((diffDays > 1 && diffDays < 30) ||
        momentizedDate.indexOf('months') != -1 ||
        momentizedDate.indexOf('weeks') != -1) {
            return moment(date).format('D MMM, YYYY');
        }

        return this.shrinkHoursMinutesAndSeconds(momentizedDate);
    },

    /**
    @method getFormattedTime
    @param date type Milliseconds
    @usage
    used the generate the time to a standard format across the app
    @return
    String of formatted time
    @logic
    if `today` it returns in relative hours else it will return it in HH:MM pm/am
    **/

    getFormattedTime: function (date) {
        var today = moment(),
        startOfToday = today.startOf('day'),
        momentizedDate = moment(date).fromNow(),
        diffDays = startOfToday.diff(moment(date).startOf('day'), 'days');

        // Show reletive date only for 2days below and for years
        if (diffDays > 1 || momentizedDate.indexOf('day') != -1) {
            return moment(date).format('LT');
        }

        return this.shrinkHoursMinutesAndSeconds(momentizedDate);
    },

    getDateGroups: function (items, timeStampKey, dateFormat = 'MMMM D') {
        var groupHash = groupBy(items, function (item) {
            if (!isFunction(item[timeStampKey])) {
              return moment(item[timeStampKey]).format('YYYY MM DD');
            }
            return [];
        }),
        groupArray = map(groupHash, function (items, name)  {
            return {
                name: name,
                items: items
            };
        }),
        sortedGroupArray = sortBy(groupArray, function (group) {
            return -moment(group.name, 'YYYY MM DD').unix();
        }),
        sortedRelativeDateGroupArray = map(sortedGroupArray, function (group) {
            return {
                name: moment(group.name, 'YYYY MM DD').calendar(null, {
                    lastDay: '[Yesterday]',
                    sameDay: '[Today]',
                    nextDay: dateFormat,
                    lastWeek: dateFormat,
                    nextWeek: dateFormat,
                    sameElse: dateFormat
                }),
                items: group.items
            };
        });

        return sortedRelativeDateGroupArray;
    },

    shrinkHoursMinutesAndSeconds: function (date) {
        var replacedSecondsMomentizedDate = date.replace('a few seconds ago', 'just now'),
        replacedMinutesSecondsMomentizedDate = replacedSecondsMomentizedDate.replace('minute', 'min'),
        replacedHoursMinutesSecondsMomentizedDate = replacedMinutesSecondsMomentizedDate.replace('hour', 'hr');
        return replacedHoursMinutesSecondsMomentizedDate;
    }

};

module.exports =  DateHelper;
