'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _assign = require('lodash/assign');

var _assign2 = _interopRequireDefault(_assign);

var _StringInput = require('../components/base/StringInput');

var _StringInput2 = _interopRequireDefault(_StringInput);

var _NumberInput = require('../components/base/NumberInput');

var _NumberInput2 = _interopRequireDefault(_NumberInput);

var _BooleanInput = require('../components/base/BooleanInput');

var _BooleanInput2 = _interopRequireDefault(_BooleanInput);

var _ObjectMeta = require('../components/base/ObjectMeta');

var _ObjectMeta2 = _interopRequireDefault(_ObjectMeta);

var _ArrayMeta = require('../components/base/ArrayMeta');

var _ArrayMeta2 = _interopRequireDefault(_ArrayMeta);

var _ObjectNameInput = require('../components/base/ObjectNameInput');

var _ObjectNameInput2 = _interopRequireDefault(_ObjectNameInput);

var _ObjectKeyInput = require('../components/base/ObjectKeyInput');

var _ObjectKeyInput2 = _interopRequireDefault(_ObjectKeyInput);

var _ObjectValueInput = require('../components/base/ObjectValueInput');

var _ObjectValueInput2 = _interopRequireDefault(_ObjectValueInput);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (customRenderers) {
  var renderers = {
    // Methods used to render base types
    string: function string(value, onAction, _ref, style, cellInfo) {
      var isCollapsed = _ref.isCollapsed,
          subColumnIndex = _ref.subColumnIndex;

      return _react2.default.createElement(_StringInput2.default, {
        value: value,
        onAction: onAction,
        cellInfo: cellInfo
      });
    },

    number: function number(value, onAction, _ref2, style, cellInfo) {
      var isCollapsed = _ref2.isCollapsed,
          subColumnIndex = _ref2.subColumnIndex;

      return _react2.default.createElement(_NumberInput2.default, {
        value: value,
        onAction: onAction,
        cellInfo: cellInfo
      });
    },

    boolean: function boolean(value, onAction, _ref3, style, cellInfo) {
      var isCollapsed = _ref3.isCollapsed,
          subColumnIndex = _ref3.subColumnIndex;

      return _react2.default.createElement(_BooleanInput2.default, {
        value: value,
        onAction: onAction,
        cellInfo: cellInfo
      });
    },

    objectmeta: function objectmeta(value, onAction, _ref4, style, cellInfo) {
      var isCollapsed = _ref4.isCollapsed,
          subColumnIndex = _ref4.subColumnIndex;

      if (subColumnIndex === 0) {
        return renderers.objectNameInput(value, onAction, { isCollapsed: isCollapsed, subColumnIndex: subColumnIndex }, style, cellInfo);
      } else if (subColumnIndex === 1) {
        return _react2.default.createElement(_ObjectMeta2.default, {
          value: value,
          onAction: onAction,
          cellInfo: cellInfo
        });
      }
    },

    arraymeta: function arraymeta(value, onAction, _ref5, style, cellInfo) {
      var isCollapsed = _ref5.isCollapsed,
          subColumnIndex = _ref5.subColumnIndex;

      if (subColumnIndex === 0) {
        return renderers.objectNameInput(value, onAction, { isCollapsed: isCollapsed, subColumnIndex: subColumnIndex }, style, cellInfo);
      } else if (subColumnIndex === 1) {
        return _react2.default.createElement(_ArrayMeta2.default, {
          value: value,
          onAction: onAction,
          cellInfo: cellInfo
        });
      }
    },

    object: function object(value, onAction, _ref6, style, cellInfo) {
      var isCollapsed = _ref6.isCollapsed,
          subColumnIndex = _ref6.subColumnIndex;

      if (subColumnIndex === 0) {
        return renderers.objectKeyInput(value, onAction, { isCollapsed: isCollapsed, subColumnIndex: subColumnIndex }, style, cellInfo);
      } else if (subColumnIndex === 1) {
        return renderers.objectValueInput(value, onAction, { isCollapsed: isCollapsed, subColumnIndex: subColumnIndex }, {}, cellInfo);
      }
    },

    row: function row(value, onAction, _ref7, style) {
      var isCollapsed = _ref7.isCollapsed,
          subColumnIndex = _ref7.subColumnIndex;

      return _react2.default.createElement(
        'div',
        { className: 'data-editor__basic-row' },
        value.children,
        _react2.default.createElement(
          'div',
          { className: 'data-editor__row__actions' },
          _react2.default.createElement('div', {
            className: 'data-editor__row__action--delete',
            onClick: function onClick() {
              onAction('delete');
            }
          })
        )
      );
    },

    // Methods used to render cells inside base types
    objectNameInput: function objectNameInput(value, onAction, _ref8, style, cellInfo) {
      var isCollapsed = _ref8.isCollapsed,
          subColumnIndex = _ref8.subColumnIndex;

      return _react2.default.createElement(_ObjectNameInput2.default, {
        style: style,
        value: value,
        onAction: onAction,
        isCollapsed: isCollapsed,
        cellInfo: cellInfo
      });
    },

    objectKeyInput: function objectKeyInput(value, onAction, _ref9, style, cellInfo) {
      var isCollapsed = _ref9.isCollapsed,
          subColumnIndex = _ref9.subColumnIndex;

      return _react2.default.createElement(_ObjectKeyInput2.default, {
        style: style,
        value: value,
        onAction: onAction,
        cellInfo: cellInfo
      });
    },

    objectValueInput: function objectValueInput(value, onAction, _ref10, style, cellInfo) {
      var isCollapsed = _ref10.isCollapsed,
          subColumnIndex = _ref10.subColumnIndex;

      return _react2.default.createElement(_ObjectValueInput2.default, {
        value: value,
        onAction: onAction,
        cellInfo: cellInfo
      });
    },

    header: function header(children) {
      return _react2.default.createElement(
        'div',
        { className: 'data-editor__basic-header' },
        children
      );
    }
  };

  return (0, _assign2.default)(renderers, customRenderers);
};