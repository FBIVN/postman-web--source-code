'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _map = require('lodash/map');

var _map2 = _interopRequireDefault(_map);

var _times = require('lodash/times');

var _times2 = _interopRequireDefault(_times);

var _filter = require('lodash/filter');

var _filter2 = _interopRequireDefault(_filter);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ListRenderer = function (_PureComponent) {
  _inherits(ListRenderer, _PureComponent);

  function ListRenderer(props, context) {
    _classCallCheck(this, ListRenderer);

    var _this = _possibleConstructorReturn(this, (ListRenderer.__proto__ || Object.getPrototypeOf(ListRenderer)).call(this, props));

    _this.state = {
      height: props.config.height,
      overscanColumnCount: 0,
      overscanRowCount: 5,
      rowHeight: 30
    };

    _this.renderColumn = _this.renderColumn.bind(_this);
    _this._rowRenderer = _this._rowRenderer.bind(_this);
    return _this;
  }

  _createClass(ListRenderer, [{
    key: 'renderColumn',
    value: function renderColumn(_ref) {
      var rowIndex = _ref.rowIndex,
          columnIndex = _ref.columnIndex,
          style = _ref.style;

      return _react2.default.createElement(
        'div',
        {
          className: 'data-editor__cell',
          key: rowIndex + '-' + columnIndex,
          style: style,
          onClick: this.props.onColumnClick.bind(this, rowIndex, columnIndex)
        },
        this.props.cellRenderer({ rowIndex: rowIndex, columnIndex: columnIndex })
      );
    }

    /*
      renderGrid ({rowIndex, columnIndex, colWidth, onScroll, scrollLeft, key}) {
        const {
          rowHeight,
        } = this.state;
    
        return (
            <Grid
              key={key}
              onScroll={onScroll}
              scrollLeft={scrollLeft}
              className='data-editor__row__grid'
              columnWidth={this.props.config.cellWidth}
              columnCount={1}
              height={rowHeight}
              overscanColumnCount={1}
              overscanRowCount={1}
              cellRenderer={this._renderGridCell.bind(this, { rowIndex, columnIndex })}
              rowHeight={rowHeight}
              rowCount={1}
              width={colWidth}
            />
          )
      }
      _renderGridCell({ rowIndex, columnIndex }, {style}) {
        return this.renderColumn({rowIndex, columnIndex, style});
      } */

  }, {
    key: '_rowRenderer',
    value: function _rowRenderer(index) {
      var _this2 = this;

      var renderedRows = (0, _filter2.default)(this.props.config.widths, function (width, index) {
        return index < _this2.props.columnCount;
      });
      var children = (0, _map2.default)(renderedRows, function (width, columnIndex) {
        // let colWidth = (width / 100) * rowWidth;
        /*
        if (columnIndex === this.props.config.scrollingColumn) {
          return this.renderGrid({rowIndex: index, columnIndex, colWidth, onScroll, scrollLeft, key})
        }
        */
        return _this2.renderColumn({ rowIndex: index, columnIndex: columnIndex, style: { width: width + '%' } });
      });

      return _react2.default.createElement(
        'div',
        { className: 'data-editor__row', key: '' + index },
        this.props.rowRenderer && this.props.rowRenderer(children, index, {})
      );
    }
  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      var classes = ['data-editor__rows'];

      if (this.props.className) {
        classes.push(this.props.className);
      }

      return _react2.default.createElement(
        'div',
        { className: classes },
        (0, _times2.default)(this.props.rowCount, function (index) {
          return _this3._rowRenderer(index);
        })
      );
    }
  }]);

  return ListRenderer;
}(_react.PureComponent);

exports.default = ListRenderer;