'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactShortcuts = require('react-shortcuts');

var _TypeSelector = require('./TypeSelector');

var _TypeSelector2 = _interopRequireDefault(_TypeSelector);

var _utils = require('../../utilities/utils');

var _utils2 = _interopRequireDefault(_utils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ObjectKeyInput = function (_Component) {
  _inherits(ObjectKeyInput, _Component);

  function ObjectKeyInput(props) {
    _classCallCheck(this, ObjectKeyInput);

    var _this = _possibleConstructorReturn(this, (ObjectKeyInput.__proto__ || Object.getPrototypeOf(ObjectKeyInput)).call(this, props));

    _this.handleFocus = _this.handleFocus.bind(_this);
    _this.handleKeyChange = _this.handleKeyChange.bind(_this);
    _this.handleTypeChange = _this.handleTypeChange.bind(_this);
    _this.handleShortcut = _this.handleShortcut.bind(_this);
    return _this;
  }

  _createClass(ObjectKeyInput, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.subscription = this.context.events.addListener('focusCell', this.handleFocus);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.subscription.remove();
    }
  }, {
    key: 'handleFocus',
    value: function handleFocus(_ref) {
      var node = _ref.node,
          column = _ref.column;

      console.log('test');
      if (node !== this.props.cellInfo.node || column !== this.props.cellInfo.column) {
        console.log('not meant for me');
        // This is not meant for me
        return;
      }

      console.log(this.refs.input);
      this.refs.input && this.refs.input.focus();
    }
  }, {
    key: 'handleShortcut',
    value: function handleShortcut(action, e) {
      e && e.preventDefault();
      e && e.stopPropagation();

      switch (action) {
        case 'MOVE_LEFT':
          this.context.events.emit('moveToCell', {
            node: this.props.cellInfo.node,
            column: this.props.cellInfo.column,
            direction: 'left'
          });
          break;
        case 'MOVE_RIGHT':
          this.context.events.emit('moveToCell', {
            node: this.props.cellInfo.node,
            column: this.props.cellInfo.column,
            direction: 'right'
          });
          break;
        case 'MOVE_UP':
          this.context.events.emit('moveToCell', {
            node: this.props.cellInfo.node,
            column: this.props.cellInfo.column,
            direction: 'up'
          });
          break;
        case 'MOVE_DOWN':
          this.context.events.emit('moveToCell', {
            node: this.props.cellInfo.node,
            column: this.props.cellInfo.column,
            direction: 'down'
          });
          break;
        default:
          break;
      }
    }
  }, {
    key: 'handleKeyChange',
    value: function handleKeyChange(e) {
      this.props.onAction && this.props.onAction('edit', { key: e.target.value });
    }
  }, {
    key: 'handleTypeChange',
    value: function handleTypeChange(e) {
      this.props.onAction && this.props.onAction('edit', { type: e.target.value });
    }
  }, {
    key: 'render',
    value: function render() {
      var key = _utils2.default.getImmutablePathValue(this.props.value, ['key']),
          type = _utils2.default.getImmutablePathValue(this.props.value, ['type']);

      return _react2.default.createElement(
        _reactShortcuts.Shortcuts,
        {
          name: 'navigation',
          handler: this.handleShortcut,
          className: 'data-editor__object-key'
        },
        _react2.default.createElement(
          'div',
          { className: 'data-editor__object-key__content', style: this.props.style },
          _react2.default.createElement('input', {
            ref: 'input',
            value: key,
            onChange: this.handleKeyChange
          }),
          _react2.default.createElement(_TypeSelector2.default, {
            value: type,
            onChange: this.handleTypeChange
          })
        )
      );
    }
  }]);

  return ObjectKeyInput;
}(_react.Component);

exports.default = ObjectKeyInput;


ObjectKeyInput.contextTypes = { events: _propTypes2.default.object };