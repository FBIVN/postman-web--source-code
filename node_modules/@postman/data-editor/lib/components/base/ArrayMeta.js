'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _utils = require('../../utilities/utils');

var _utils2 = _interopRequireDefault(_utils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ArrayMeta = function (_Component) {
  _inherits(ArrayMeta, _Component);

  function ArrayMeta(props) {
    _classCallCheck(this, ArrayMeta);

    var _this = _possibleConstructorReturn(this, (ArrayMeta.__proto__ || Object.getPrototypeOf(ArrayMeta)).call(this, props));

    _this.handleFocus = _this.handleFocus.bind(_this);
    _this.handleAddChild = _this.handleAddChild.bind(_this);
    return _this;
  }

  _createClass(ArrayMeta, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.subscription = this.context.events.addListener('focusCell', this.handleFocus);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.subscription.remove();
    }
  }, {
    key: 'handleFocus',
    value: function handleFocus(_ref) {
      var node = _ref.node,
          column = _ref.column,
          direction = _ref.direction;

      if (node !== this.props.cellInfo.node || column !== this.props.cellInfo.column) {
        // This is not meant for me
        return;
      }

      this.context.events.emit('moveToCell', {
        node: this.props.cellInfo.node,
        column: this.props.cellInfo.column,
        direction: direction
      });
    }
  }, {
    key: 'handleAddChild',
    value: function handleAddChild() {
      this.props.onAction && this.props.onAction('create');
    }
  }, {
    key: 'render',
    value: function render() {
      var count = _utils2.default.getImmutablePathValue(this.props.value, ['childrenCount']);

      return _react2.default.createElement(
        'div',
        { className: 'data-editor__array-meta' },
        'Array (' + count + ' items)',
        _react2.default.createElement(
          'div',
          {
            className: 'data-editor__add-child',
            onClick: this.handleAddChild
          },
          '+'
        )
      );
    }
  }]);

  return ArrayMeta;
}(_react.Component);

exports.default = ArrayMeta;


ArrayMeta.contextTypes = { events: _propTypes2.default.object };