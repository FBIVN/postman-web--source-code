'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _immutable = require('immutable');

var _CreateReducer = require('./CreateReducer');

var _CreateReducer2 = _interopRequireDefault(_CreateReducer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var EditReducer = function EditReducer(state, _ref, _ref2, config) {
  var node = _ref.node,
      column = _ref.column;
  var meta = _ref2.meta;

  // Set the meta name
  if (!(typeof meta.name === 'undefined')) {
    state = state.setIn(['rows', '' + node, 'columns', '' + column, 'meta', 'name'], meta.name);
  }

  // Set the meta key
  if (!(typeof meta.key === 'undefined')) {
    state = state.setIn(['rows', '' + node, 'columns', '' + column, 'meta', 'key'], meta.key);
  }

  // Set the meta value
  if (!(typeof meta.value === 'undefined')) {
    state = state.setIn(['rows', '' + node, 'columns', '' + column, 'meta', 'value'], meta.value);
  }

  // Set the meta type
  if (!(typeof meta.type === 'undefined')) {
    // Set the object's type
    state = state.setIn(['rows', '' + node, 'columns', '' + column, 'meta', 'type'], meta.type);

    // Type conversions
    // Check if this node has children. If it does, remove all their references
    var children = state.getIn(['rows', '' + node, 'allChildren']);

    if (children) {
      // Remove all children from the order list
      var order = state.getIn(['order']);
      order = order.filter(function (nodeId) {
        return !children.includes(nodeId);
      });
      state = state.setIn(['order'], order);

      // Remove all children from the state map
      children.forEach(function (child) {
        state = state.deleteIn(['rows', '' + child]);
      });

      // Remove all children from the allChildren list
      state = state.deleteIn(['rows', '' + node, 'children']);
      state = state.deleteIn(['rows', '' + node, 'allChildren']);
      state = state.deleteIn(['rows', '' + node, 'columns', '' + column, 'meta', 'childrenCount']);
    }

    var previousName = state.getIn(['rows', '' + node, 'columns', '' + column, 'meta', 'key']) || state.getIn(['rows', '' + node, 'columns', '' + column, 'meta', 'name']) || state.getIn(['rows', '' + node, 'columns', '' + column, 'meta', 'value']);

    // Initialize row correctly based on the new type
    if (meta.type === 'string' || meta.type === 'number' || meta.type === 'boolean') {
      // If the new type is a simple type, set the row's type as object
      state = state.setIn(['rows', '' + node, 'columns', '' + column, 'type'], 'object');
      state = state.setIn(['rows', '' + node, 'columns', '' + column, 'meta'], (0, _immutable.fromJS)({ key: previousName || '' }));
    } else if (meta.type === 'array') {
      // If the new type is an array, set the row's type as arraymeta and initialize children meta
      state = state.setIn(['rows', '' + node, 'columns', '' + column, 'type'], 'arraymeta');
      state = state.setIn(['rows', '' + node, 'children'], (0, _immutable.fromJS)([]));
      state = state.setIn(['rows', '' + node, 'allChildren'], (0, _immutable.fromJS)([]));
      state = state.setIn(['rows', '' + node, 'columns', '' + column, 'meta'], (0, _immutable.fromJS)({ name: previousName || '', childrenCount: 0, type: 'array' }));

      // Add a child to this node by default
      state = (0, _CreateReducer2.default)(state, { node: node, column: column }, {}, config);
    } else if (meta.type === 'object') {
      // If the new type is an object, set the row's type as objectmeta and initialize children meta
      state = state.setIn(['rows', '' + node, 'columns', '' + column, 'type'], 'objectmeta');
      state = state.setIn(['rows', '' + node, 'children'], (0, _immutable.fromJS)([]));
      state = state.setIn(['rows', '' + node, 'allChildren'], (0, _immutable.fromJS)([]));
      state = state.setIn(['rows', '' + node, 'columns', '' + column, 'meta'], (0, _immutable.fromJS)({ name: previousName || '', childrenCount: 0, type: 'object' }));

      // Add a child to this node by default
      state = (0, _CreateReducer2.default)(state, { node: node, column: column }, {}, config);
    }
  }

  return state;
};

exports.default = EditReducer;