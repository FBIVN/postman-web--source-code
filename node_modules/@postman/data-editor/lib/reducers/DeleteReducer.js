'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
var DeleteReducer = function DeleteReducer(state, _ref) {
  var node = _ref.node,
      column = _ref.column;

  // Check if the node has any children
  var children = state.getIn(['rows', '' + node, 'allChildren']),
      order = state.getIn(['order']);

  if (children) {
    // If there are children
    children.forEach(function (child) {
      // Delete child from the state map
      state = state.deleteIn('rows', ['' + node]);

      // Delete child from the state order list
      var childIndex = order.findIndex(function (nodeId) {
        return nodeId === child;
      });
      order = order.delete(childIndex);
    });
  }

  // Find parent
  var parentId = state.getIn(['rows', '' + node, 'parent']);

  if (parentId) {
    var parent = state.getIn(['rows', '' + parentId]);

    // Remove node's ID from parent's allChildren list
    var parentAllChildren = parent.get('allChildren');
    var nodeInParentAllChildren = parentAllChildren.indexOf(node);
    parent.set('allChildren', parentAllChildren.delete(nodeInParentAllChildren));

    // Remove node's ID from parent's children list
    var parentChildren = parent.get('children');
    var nodeInParentChildren = parentChildren.indexOf(node);
    parent.set('children', parentChildren.delete(nodeInParentChildren));

    // Decrement parent's childrenCount
    // WHyyyyyy delete reducer is depending on column ??
    // console.log('parent',parent, column);
    // let parentChildrenCount = parent.get('columns', `${column}`, 'meta', 'childrenCount')
    // console.log(parentChildrenCount)
    // parent.set('columns', `${column}`, 'meta', 'childrenCount', parentChildrenCount - 1)
  }

  // Delete the current node from the state map
  state = state.deleteIn(['rows', '' + node]);

  // Delete the node from the order list
  var nodeIndex = order.indexOf(node);
  order = order.delete(nodeIndex);
  state = state.setIn(['order'], order);

  return state;
};

exports.default = DeleteReducer;