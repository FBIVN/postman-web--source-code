'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
var ExpandReducer = function ExpandReducer(state, _ref) {
  var node = _ref.node,
      column = _ref.column;

  // Check if the current node has children. If it doesn't, nothing has to be done
  var children = state.getIn(['rows', '' + node, 'allChildren']);
  if (!children) {
    return state;
  }

  // If the row is already expanded, there is nothing to do
  var isExpanded = !state.getIn(['collapsedRows', '' + node]);
  if (isExpanded) {
    return state;
  }

  // Append the current node's children to the order array after the current node
  var order = state.getIn(['order']),
      currentNodePosition = order.findIndex(function (nodeId) {
    return nodeId === node;
  });
  children.forEach(function (child, index) {
    order = order.insert(currentNodePosition + index + 1, child);
  });
  state = state.setIn(['order'], order);

  // Remove this node from the collapsedRows list
  state = state.deleteIn(['collapsedRows', '' + node]);

  return state;
};

exports.default = ExpandReducer;