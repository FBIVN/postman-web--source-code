'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _utils = require('../utilities/utils');

var _utils2 = _interopRequireDefault(_utils);

var _forEach = require('lodash/forEach');

var _forEach2 = _interopRequireDefault(_forEach);

var _get = require('lodash/get');

var _get2 = _interopRequireDefault(_get);

var _immutable = require('immutable');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var getColumns = function getColumns(config) {
  var columns = {};

  (0, _forEach2.default)(config.columns, function (column) {
    switch (column.type) {
      case 'string':
        columns['' + column.name] = {
          type: 'string',
          meta: { value: (0, _get2.default)(column, 'default', '') }
        };
        break;
      case 'number':
        columns['' + column.name] = {
          type: 'number',
          meta: { value: (0, _get2.default)(column, 'default', 0) }
        };
        break;
      case 'boolean':
        columns['' + column.name] = {
          type: 'boolean',
          meta: { value: (0, _get2.default)(column, 'default', true) }
        };
        break;
      case 'array':
        columns['' + column.name] = {
          type: 'array',
          meta: { key: (0, _get2.default)(column, 'default', ''), type: 'string' }
        };
        break;
      case 'object':
        columns['' + column.name] = {
          type: 'object',
          meta: { key: (0, _get2.default)(column, 'default.key', ''), value: (0, _get2.default)(column, 'default.value', ''), type: 'string' }
        };
        break;
      default:
    }
  });

  return columns;
};

var CreateReducer = function CreateReducer(state, _ref, payload, config) {
  var node = _ref.node,
      column = _ref.column;

  if (typeof node === 'undefined' || node === null) {
    // This means a new node is supposed to be created at the root level
    // Generate the new node
    var _newNodeId = _utils2.default.getId();
    var _newNode = {
      id: _newNodeId,
      depth: 0,
      columns: getColumns(config)

      // Add the new node to the state's map
    };state = state.setIn(['rows', '' + _newNodeId], (0, _immutable.fromJS)(_newNode));

    // Add the new node's ID to the state's order list, at the end
    var _order = state.getIn(['order']);
    _order = _order.concat(_newNodeId);
    state = state.setIn(['order'], _order);

    return state;
  }

  var parentNode = state.getIn(['rows', '' + node]);
  var newNodeId = _utils2.default.getId();

  // Generate the new node
  var newNode = {
    id: newNodeId,
    depth: parentNode.get('depth') + 1,
    parent: node,
    columns: getColumns(config)

    // Add the new node to the state's map
  };state = state.setIn(['rows', '' + newNodeId], (0, _immutable.fromJS)(newNode));

  // Add the new node's ID to the state's order list.
  // Find the parent's ID in the list and add this ID right after it (to indicate that this is a child)
  var order = state.getIn(['order']),
      parentPosition = order.indexOf(node);
  order = order.insert(parentPosition + 1, newNodeId);
  state = state.setIn(['order'], order);

  // Add this new node to the parent's allChildren list
  var parentAllChildren = state.getIn(['rows', '' + node, 'allChildren']);
  parentAllChildren = parentAllChildren.push(newNodeId);
  state = state.setIn(['rows', '' + node, 'allChildren'], parentAllChildren);

  // Add this new node to the parent's (direct) children list
  var parentChildren = state.getIn(['rows', '' + node, 'children']);
  parentChildren = parentChildren.push(newNodeId);
  state = state.setIn(['rows', '' + node, 'children'], parentChildren);

  // Add 1 to the parent's childrenCount
  var parentChildrenCount = state.getIn(['rows', '' + node, 'columns', '' + column, 'meta', 'childrenCount']);
  state = state.setIn(['rows', '' + node, 'columns', '' + column, 'meta', 'childrenCount'], parentChildrenCount + 1);

  return state;
};

exports.default = CreateReducer;