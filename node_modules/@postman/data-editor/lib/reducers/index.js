'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _CreateReducer = require('./CreateReducer');

var _CreateReducer2 = _interopRequireDefault(_CreateReducer);

var _EditReducer = require('./EditReducer');

var _EditReducer2 = _interopRequireDefault(_EditReducer);

var _MoveReducer = require('./MoveReducer');

var _MoveReducer2 = _interopRequireDefault(_MoveReducer);

var _DeleteReducer = require('./DeleteReducer');

var _DeleteReducer2 = _interopRequireDefault(_DeleteReducer);

var _CollapseReducer = require('./CollapseReducer');

var _CollapseReducer2 = _interopRequireDefault(_CollapseReducer);

var _ExpandReducer = require('./ExpandReducer');

var _ExpandReducer2 = _interopRequireDefault(_ExpandReducer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Reducer = function () {
  function Reducer(config) {
    _classCallCheck(this, Reducer);

    this.config = config;
  }

  _createClass(Reducer, [{
    key: 'reduce',
    value: function reduce(state, action) {
      switch (action.type) {
        case 'create':
          return (0, _CreateReducer2.default)(state, action.source, action.payload, this.config);
        case 'edit':
          return (0, _EditReducer2.default)(state, action.source, action.payload, this.config);
        case 'move':
          return (0, _MoveReducer2.default)(state, action.source, action.payload);
        case 'delete':
          return (0, _DeleteReducer2.default)(state, action.source, action.payload);
        case 'collapse':
          return (0, _CollapseReducer2.default)(state, action.source);
        case 'expand':
          return (0, _ExpandReducer2.default)(state, action.source);
        default:
          return state;
      }
    }
  }]);

  return Reducer;
}();

exports.default = Reducer;